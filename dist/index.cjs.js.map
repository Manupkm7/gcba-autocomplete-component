{"version":3,"file":"index.cjs.js","sources":["../src/lib/const.ts","../src/lib/api-normalizer.ts","../src/assets/Loader.tsx","../src/assets/Navigation.tsx","../src/components/search.tsx","../src/hooks/useAddressSearch.tsx"],"sourcesContent":["const nombresAvenidasBase = [\r\n  \"9 de Julio\",\r\n  \"Rivadavia\",\r\n  \"Corrientes\",\r\n  \"Santa Fe\",\r\n  \"Córdoba\",\r\n  \"del Libertador\",\r\n  \"de Mayo\",\r\n  \"Pueyrredón\",\r\n  \"Callao\",\r\n  \"San Juan\",\r\n  \"Belgrano\",\r\n  \"Independencia\",\r\n  \"Entre Ríos\",\r\n  \"Leandro N. Alem\",\r\n  \"Juan B. Justo\",\r\n  \"Scalabrini Ortiz\",\r\n  \"Federico Lacroze\",\r\n  \"Alvear\",\r\n  \"Las Heras\",\r\n  \"General Paz\",\r\n];\r\n\r\nexport const normalizarComoAvenida = (calle: string): string => {\r\n  const match = nombresAvenidasBase.find((nombre) =>\r\n    calle.toLowerCase().includes(nombre.toLowerCase())\r\n  );\r\n  return match ? `${capitalizar(match)} Av.` : capitalizar(calle);\r\n};\r\n\r\nconst capitalizar = (str: string): string =>\r\n  str\r\n    .toLowerCase()\r\n    .split(\" \")\r\n    .map((p) => p.charAt(0).toUpperCase() + p.slice(1))\r\n    .join(\" \");\r\n","import type {\r\n  Calle,\r\n  DireccionType,\r\n  DireccionCalleAltura,\r\n  DireccionCalleYCalle,\r\n  Coordinates,\r\n} from \"../types/direction.types\";\r\nimport axios, { type AxiosRequestConfig } from \"axios\";\r\nimport { normalizarComoAvenida } from \"./const\";\r\n\r\n// API endpoints\r\nconst USIG_WEBSERVICE_URL = \"https://servicios.usig.buenosaires.gob.ar\";\r\nconst CATASTRO_WEBSERVICE_URL = \"https://epok.buenosaires.gob.ar/catastro\";\r\n\r\n// Response types\r\ninterface NormalizadorResponse {\r\n  direccionesNormalizadas?: Array<{\r\n    direccion?: string;\r\n    tipo?: string;\r\n    nombre?: string;\r\n    nombre_calle?: string;\r\n    altura?: number | string;\r\n    cod_calle?: string;\r\n    cod_partido?: string;\r\n    partido?: string;\r\n    cod_localidad?: string;\r\n    nombre_partido?: string;\r\n    nombre_localidad?: string;\r\n    localidad?: string;\r\n    comuna?: string;\r\n    barrio?: string;\r\n    coordenadas?: Coordinates;\r\n  }>;\r\n  calles?: Array<{\r\n    nombre: string;\r\n    tipo?: string;\r\n    cod_calle: string;\r\n    altura?: {\r\n      inicial: number;\r\n      final: number;\r\n    };\r\n    partido?: string;\r\n    localidad?: string;\r\n  }>;\r\n  error?: string;\r\n}\r\n\r\ninterface CatastroResponse {\r\n  smp?: string;\r\n  error?: string;\r\n}\r\n\r\ninterface ReverseGeocodingResponse {\r\n  direccion?: string;\r\n  tipo?: string;\r\n  nombre?: string;\r\n  altura?: number | string;\r\n  cod_calle?: string;\r\n  cod_partido?: string;\r\n  partido?: string;\r\n  cod_localidad?: string;\r\n  localidad?: string;\r\n  nombre_barrio?: string;\r\n  nombre_comuna?: string;\r\n  nombre_partido?: string;\r\n  nombre_localidad?: string;\r\n  barrio?: string;\r\n  coordenadas?: {\r\n    x: string;\r\n    y: string;\r\n    srid: number;\r\n  };\r\n  error?: string;\r\n}\r\n\r\nexport class ApiNormalizer {\r\n  private debug: boolean;\r\n  private maxSuggestions: number;\r\n  private lastRequest: AbortController | null;\r\n  private serverTimeout: number;\r\n\r\n  constructor(\r\n    options: {\r\n      debug?: boolean;\r\n      maxSuggestions?: number;\r\n      serverTimeout?: number;\r\n    } = {}\r\n  ) {\r\n    this.debug = options.debug || false;\r\n    this.maxSuggestions = options.maxSuggestions || 10;\r\n    this.serverTimeout = options.serverTimeout || 5000;\r\n    this.lastRequest = null;\r\n  }\r\n\r\n  /**\r\n   * Abort any ongoing request\r\n   */\r\n  abort(): void {\r\n    if (this.lastRequest) {\r\n      this.lastRequest.abort();\r\n      this.lastRequest = null;\r\n      if (this.debug) console.debug(\"Request aborted\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Normalizes an address string and returns matching addresses\r\n   */\r\n  async normalizar(\r\n    str: string,\r\n    maxOptions: number = this.maxSuggestions\r\n  ): Promise<Array<DireccionType | Calle>> {\r\n    if (this.debug) {\r\n      console.debug(`ApiNormalizer.normalizar('${str}', ${maxOptions})`);\r\n    }\r\n\r\n    // Abort previous request if exists\r\n    this.abort();\r\n\r\n    // Create new AbortController for this request\r\n    this.lastRequest = new AbortController();\r\n\r\n    try {\r\n      let results: Array<DireccionType | Calle> = [];\r\n      // 1. First search for addresses\r\n      const addresses = await this.searchAddresses(str, maxOptions);\r\n      results = [...results, ...addresses];\r\n      // 2. Check if input is coordinates and search if it is\r\n      const coordsMatch = this.parseCoordinates(str);\r\n      if (coordsMatch) {\r\n        const coordResults = await this.reverseGeocode(\r\n          coordsMatch.x,\r\n          coordsMatch.y\r\n        );\r\n        results = [...results, ...coordResults];\r\n      }\r\n\r\n      return results.slice(0, maxOptions);\r\n    } catch (error) {\r\n      if (axios.isCancel(error)) {\r\n        if (this.debug) console.debug(\"Request was cancelled\");\r\n      } else {\r\n        console.error(\"Error normalizing address:\", error);\r\n      }\r\n      return [];\r\n    } finally {\r\n      this.lastRequest = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Search for addresses using the USIG API\r\n   */\r\n  private async searchAddresses(\r\n    str: string,\r\n    maxOptions: number\r\n  ): Promise<Array<DireccionType | Calle>> {\r\n    try {\r\n      const interseccionRegex = /\\s[ye]\\s/i;\r\n      const esInterseccion = interseccionRegex.test(str);\r\n      const partes = str\r\n        .split(interseccionRegex)\r\n        .map((s) => s.trim().toUpperCase());\r\n\r\n      if (esInterseccion && partes.length === 2) {\r\n        const [calle1, calle2] = partes;\r\n\r\n        const coords = await this.obtenerCoordenadasInterseccion(\r\n          calle1,\r\n          calle2\r\n        );\r\n        if (!coords) return [];\r\n\r\n        const barrioYComuna = await this.obtenerBarrioYComuna(\r\n          coords.y,\r\n          coords.x\r\n        );\r\n\r\n        const calleObj1: Calle = {\r\n          codigo: calle1,\r\n          nombre: calle1,\r\n          tipo: \"CALLE\",\r\n          alturas: [],\r\n        };\r\n\r\n        const calleObj2: Calle = {\r\n          codigo: calle2,\r\n          nombre: calle2,\r\n          tipo: \"CALLE\",\r\n          alturas: [],\r\n        };\r\n\r\n        const direccion: DireccionCalleYCalle = {\r\n          tipo: \"DIRECCION\",\r\n          nombre:\r\n            coords.x && coords.y\r\n              ? `${calle1} y ${calle2}`\r\n              : \"La calle no fue encontrada\",\r\n          tipoDireccion: \"DIRECCION_CALLE_Y_CALLE\",\r\n          calle: calleObj1,\r\n          calleCruce: calleObj2,\r\n          coordenadas: {\r\n            x: coords.x,\r\n            y: coords.y,\r\n            srid: 4326,\r\n          },\r\n          barrio: barrioYComuna.barrio,\r\n          comuna: barrioYComuna.comuna,\r\n        };\r\n\r\n        return [direccion];\r\n      }\r\n\r\n      // Si no es intersección, se hace el llamado habitual al normalizador\r\n      const url = `${USIG_WEBSERVICE_URL}/normalizar/?direccion=${encodeURIComponent(\r\n        str\r\n      )}&geocodificar=true&max=${maxOptions}`;\r\n\r\n      const config: AxiosRequestConfig = {\r\n        headers: { Accept: \"application/json\" },\r\n        signal: this.lastRequest?.signal,\r\n        timeout: this.serverTimeout,\r\n      };\r\n\r\n      const response = await axios.get<NormalizadorResponse>(url, config);\r\n      if (response.data.error) {\r\n        if (this.debug) console.error(\"API error:\", response.data.error);\r\n        return [];\r\n      }\r\n\r\n      if (\r\n        response.data.direccionesNormalizadas &&\r\n        response.data.direccionesNormalizadas.length > 0\r\n      ) {\r\n        const direccionesCABA = response.data.direccionesNormalizadas.filter(\r\n          (dir) => {\r\n            const cod = dir.cod_partido?.toLowerCase();\r\n            const nombrePartido = dir.nombre_partido?.toLowerCase();\r\n            const nombreLocalidad = dir.nombre_localidad?.toLowerCase();\r\n\r\n            return (\r\n              cod === \"caba\" ||\r\n              nombrePartido === \"caba\" ||\r\n              nombreLocalidad === \"caba\"\r\n            );\r\n          }\r\n        );\r\n        const direccionesEnriquecidas = await Promise.all(\r\n          direccionesCABA.map(async (dir) => {\r\n            const coordenadas = await this.obtenerCoordenadas(\r\n              dir.nombre_calle ?? \"\",\r\n              Number(dir.altura ?? 0)\r\n            );\r\n            if (coordenadas) {\r\n              const { barrio, comuna } = await this.obtenerBarrioYComuna(\r\n                coordenadas.y,\r\n                coordenadas.x\r\n              );\r\n              const calle: Calle = {\r\n                codigo: dir.cod_calle ?? \"\",\r\n                nombre: dir.nombre_calle ?? \"\",\r\n                tipo: \"CALLE\",\r\n                alturas: [],\r\n              };\r\n\r\n              const coordenadasStr = {\r\n                x: coordenadas.x,\r\n                y: coordenadas.y,\r\n                srid: coordenadas.srid ?? 4326,\r\n              };\r\n\r\n              const direccion: DireccionCalleAltura = {\r\n                tipo: \"DIRECCION\",\r\n                nombre: calle.nombre!,\r\n                tipoDireccion: \"DIRECCION_CALLE_ALTURA\",\r\n                calle,\r\n                altura: Number(dir.altura ?? 0),\r\n                coordenadas: coordenadasStr,\r\n                barrio,\r\n                comuna,\r\n                cod_calle: dir.cod_calle ?? \"\",\r\n              };\r\n\r\n              return direccion;\r\n            }\r\n\r\n            return dir; // fallback por si no hay coordenadas\r\n          })\r\n        );\r\n        return this.processDireccionesNormalizadas(direccionesEnriquecidas);\r\n      }\r\n\r\n      if (response.data.calles && response.data.calles.length > 0) {\r\n        return this.processCalles(response.data.calles);\r\n      }\r\n\r\n      return [];\r\n    } catch (error) {\r\n      if (axios.isCancel(error)) {\r\n        if (this.debug) console.debug(\"Address search request was cancelled\");\r\n      } else {\r\n        console.error(\"Error searching addresses:\", error);\r\n      }\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private async obtenerBarrioYComuna(\r\n    lat: number,\r\n    lon: number\r\n  ): Promise<{ barrio?: string; comuna?: string }> {\r\n    try {\r\n      const url = `https://ws.usig.buenosaires.gob.ar/datos_utiles/?x=${lon}&y=${lat}`;\r\n      const response = await axios.get(url);\r\n      const capas = response.data;\r\n      const barrio = capas?.barrio;\r\n      const comuna = capas?.comuna;\r\n\r\n      return { barrio, comuna };\r\n    } catch (error) {\r\n      console.error(\"Error al obtener barrio y comuna:\", error);\r\n      return {};\r\n    }\r\n  }\r\n\r\n  private obtenerCoordenadasInterseccion = async (\r\n    calle1: string,\r\n    calle2: string\r\n  ): Promise<Coordinates | null> => {\r\n    try {\r\n      // Normalización previa\r\n      const normalizadaCalle1 = normalizarComoAvenida(calle1);\r\n      const normalizadaCalle2 = normalizarComoAvenida(calle2);\r\n\r\n      const url = `https://ws.usig.buenosaires.gob.ar/geocoder/2.2/geocoding?cod_calle1=${encodeURIComponent(\r\n        normalizadaCalle1.toLocaleUpperCase()\r\n      )}&cod_calle2=${encodeURIComponent(\r\n        normalizadaCalle2.toLocaleUpperCase()\r\n      )}`;\r\n\r\n      const response = await axios.get(url);\r\n      const rawText: string = response.data;\r\n\r\n      const jsonString = rawText.replace(/^\\(|\\)$/g, \"\");\r\n      const parsed = JSON.parse(jsonString);\r\n\r\n      const { x, y } = parsed;\r\n\r\n      return { x, y };\r\n    } catch (error) {\r\n      console.error(\r\n        \"Error al obtener las coordenadas de la intersección:\",\r\n        error\r\n      );\r\n      return null;\r\n    }\r\n  };\r\n\r\n  private async obtenerCoordenadas(\r\n    calle: string,\r\n    numero: number\r\n  ): Promise<Coordinates | null> {\r\n    try {\r\n      const geocodingUrl = `https://ws.usig.buenosaires.gob.ar/geocoder/2.2/geocoding?cod_calle=${encodeURIComponent(\r\n        calle\r\n      )}&altura=${numero}`;\r\n\r\n      const geocodingResponse = await axios.get<string>(geocodingUrl);\r\n      const text = geocodingResponse.data;\r\n      // Elimina los paréntesis del string\r\n      const jsonString = text.replace(/^\\(|\\)$/g, \"\");\r\n      const data = JSON.parse(jsonString);\r\n      const { x, y } = data;\r\n\r\n      const conversionUrl = `https://ws.usig.buenosaires.gob.ar/rest/convertir_coordenadas/?x=${x}&y=${y}&output=lonlat`;\r\n      const conversionResponse = await axios.get(conversionUrl);\r\n\r\n      const { x: lon, y: lat } = conversionResponse.data.resultado;\r\n\r\n      return { y: lat, x: lon };\r\n    } catch (error) {\r\n      console.error(\"Error al obtener coordenadas:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse coordinates from input string\r\n   * Supports formats like \"lat,lng\", \"x,y\", \"-34.603722,-58.381592\"\r\n   */\r\n  private parseCoordinates(str: string): Coordinates | null {\r\n    // Remove any spaces\r\n    const cleanStr = str.trim().replace(/\\s+/g, \"\");\r\n\r\n    // Match common coordinate formats\r\n    const patterns = [\r\n      // Lat,Lng format (e.g., -34.603722,-58.381592)\r\n      /^(-?\\d+\\.?\\d*),(-?\\d+\\.?\\d*)$/,\r\n      // X,Y format with optional text (e.g., \"x: 123.45, y: 678.90\")\r\n      /x:?(-?\\d+\\.?\\d*)[,\\s]+y:?(-?\\d+\\.?\\d*)/i,\r\n      // Y,X format with optional text (e.g., \"y: 678.90, x: 123.45\")\r\n      /y:?(-?\\d+\\.?\\d*)[,\\s]+x:?(-?\\d+\\.?\\d*)/i,\r\n    ];\r\n\r\n    for (const pattern of patterns) {\r\n      const match = cleanStr.match(pattern);\r\n      if (match) {\r\n        if (pattern === patterns[0]) {\r\n          // Lat,Lng format\r\n          return {\r\n            y: Number.parseFloat(match[1]), // Latitude is Y\r\n            x: Number.parseFloat(match[2]), // Longitude is X\r\n          };\r\n        } else if (pattern === patterns[1]) {\r\n          // X,Y format\r\n          return {\r\n            x: Number.parseFloat(match[1]),\r\n            y: Number.parseFloat(match[2]),\r\n          };\r\n        } else if (pattern === patterns[2]) {\r\n          // Y,X format\r\n          return {\r\n            y: Number.parseFloat(match[1]),\r\n            x: Number.parseFloat(match[2]),\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Reverse geocode coordinates to get an address\r\n   */\r\n  private async reverseGeocode(x: number, y: number): Promise<DireccionType[]> {\r\n    if (this.debug) {\r\n      console.debug(`ApiNormalizer.reverseGeocode(${x}, ${y})`);\r\n    }\r\n\r\n    // Abort previous request if exists\r\n    this.abort();\r\n\r\n    // Create new AbortController for this request\r\n    this.lastRequest = new AbortController();\r\n\r\n    try {\r\n      const url = `${USIG_WEBSERVICE_URL}/reverseGeocoderLugares/?x=${x}&y=${y}&srid=4326`;\r\n\r\n      const config: AxiosRequestConfig = {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n        },\r\n        signal: this.lastRequest.signal,\r\n        timeout: this.serverTimeout,\r\n      };\r\n\r\n      const response = await axios.get<ReverseGeocodingResponse>(url, config);\r\n\r\n      if (response.data.error) {\r\n        if (this.debug)\r\n          console.error(\"Reverse geocoding API error:\", response.data.error);\r\n        return [];\r\n      }\r\n\r\n      if (!response.data.direccion) {\r\n        return [];\r\n      }\r\n\r\n      // Create a base calle object\r\n      const calle: Calle = {\r\n        codigo: response.data.cod_calle || \"coord\",\r\n        nombre: response.data.nombre || response.data.direccion || \"Coordenada\",\r\n        descripcion: response.data.direccion || \"Coordenada\",\r\n        tipo: \"CALLE\",\r\n        alturas: [\r\n          {\r\n            inicio: 1,\r\n            fin: 10000, // Default range\r\n          },\r\n        ],\r\n      };\r\n\r\n      // Parse altura if available\r\n      let altura = 0;\r\n      if (response.data.altura) {\r\n        altura = Number(response.data.altura);\r\n      }\r\n\r\n      // Create a DireccionCalleAltura object\r\n      const direccion: DireccionCalleAltura = {\r\n        calle,\r\n        altura: altura || 1, // Default to 1 if no number found\r\n        tipoDireccion: \"DIRECCION_CALLE_ALTURA\",\r\n        tipo: \"DIRECCION\",\r\n        nombre:\r\n          response.data.direccion ||\r\n          `Coordenada (${x.toFixed(6)}, ${y.toFixed(6)})`,\r\n        descripcion: `Coordenada (${x.toFixed(6)}, ${y.toFixed(6)})`,\r\n        coordenadas: {\r\n          x,\r\n          y,\r\n          srid: response.data.coordenadas?.srid || 4326,\r\n        },\r\n        barrio: response.data.nombre_barrio,\r\n        comuna: response.data.nombre_comuna,\r\n      };\r\n\r\n      return [direccion];\r\n    } catch (error) {\r\n      if (axios.isCancel(error)) {\r\n        if (this.debug)\r\n          console.debug(\"Reverse geocoding request was cancelled\");\r\n      } else {\r\n        console.error(\"Error in reverse geocoding:\", error);\r\n      }\r\n      return [];\r\n    } finally {\r\n      this.lastRequest = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process normalized addresses from API response\r\n   */\r\n  private processDireccionesNormalizadas(\r\n    direcciones: NormalizadorResponse[\"direccionesNormalizadas\"]\r\n  ): Promise<DireccionType[]> {\r\n    if (!direcciones) return Promise.resolve([]);\r\n\r\n    const promises = direcciones.map(async (dir) => {\r\n      // Skip invalid addresses\r\n      if (!dir.nombre || !dir.cod_calle) return null;\r\n      // Create a base calle object\r\n      const calle: Calle = {\r\n        codigo: dir.cod_calle,\r\n        nombre: dir.nombre || dir.nombre_calle || \"\",\r\n        descripcion: dir.direccion,\r\n        tipo: \"CALLE\",\r\n        alturas: [\r\n          {\r\n            inicio: 1,\r\n            fin: 10000, // Default range\r\n          },\r\n        ],\r\n      };\r\n\r\n      // Determine if it's a street intersection or street with number\r\n      const isIntersection = dir.nombre.includes(\" y \");\r\n      let direccion: DireccionType;\r\n      if (isIntersection) {\r\n        // It's a street intersection\r\n        const calleNames = dir.nombre.split(\" y \").map((c) => c.trim());\r\n\r\n        // We need to create a second calle object for the intersection\r\n        // In a real app, you might want to make another API call to get details\r\n        // For now, we'll create a mock second street\r\n        const calleCruce: Calle = {\r\n          codigo: `${dir.cod_calle}_cruce`,\r\n          nombre: calleNames[1] || \"Calle cruce\",\r\n          descripcion: calleNames[1] || \"Calle cruce\",\r\n          tipo: \"CALLE\",\r\n          alturas: [\r\n            {\r\n              inicio: 1,\r\n              fin: 10000,\r\n            },\r\n          ],\r\n        };\r\n\r\n        direccion = {\r\n          calle,\r\n          calleCruce,\r\n          tipoDireccion: \"DIRECCION_CALLE_Y_CALLE\",\r\n          tipo: \"DIRECCION\",\r\n          nombre: dir.nombre,\r\n          descripcion: `Coordenada (${dir.coordenadas?.x.toFixed(\r\n            6\r\n          )}, ${dir.coordenadas?.y.toFixed(6)})`,\r\n          coordenadas: dir.coordenadas\r\n            ? {\r\n                x: dir.coordenadas.x,\r\n                y: dir.coordenadas.y,\r\n                srid: dir.coordenadas.srid,\r\n              }\r\n            : undefined,\r\n          barrio: dir.barrio,\r\n          comuna: dir.comuna,\r\n          altura: Number(dir.altura),\r\n          smp: undefined,\r\n        } as DireccionCalleYCalle;\r\n      } else {\r\n        // It's a street with number\r\n        direccion = {\r\n          calle,\r\n          altura: Number(dir.altura),\r\n          tipoDireccion: \"DIRECCION_CALLE_ALTURA\",\r\n          tipo: \"DIRECCION\",\r\n          nombre: `${dir.nombre} ${dir.altura}`,\r\n          descripcion: dir.direccion,\r\n          coordenadas: dir.coordenadas\r\n            ? {\r\n                x: dir.coordenadas.x,\r\n                y: dir.coordenadas.y,\r\n                srid: dir.coordenadas.srid,\r\n              }\r\n            : undefined,\r\n          barrio: dir.barrio,\r\n          comuna: dir.comuna,\r\n          calleCruce: undefined,\r\n          smp: undefined,\r\n        } as DireccionCalleAltura;\r\n\r\n        // Get SMP if it's a street with number\r\n        if (Number(dir.altura) > 0) {\r\n          try {\r\n            const smp = await this.getSMP({\r\n              nombre: dir.nombre_calle || \"\",\r\n              descripcion: dir.nombre || \"\",\r\n              tipo: \"DIRECCION\",\r\n              codigo: dir.cod_calle,\r\n              altura: dir.altura,\r\n              calle: {\r\n                codigo: dir.cod_calle,\r\n              },\r\n            });\r\n            direccion.smp = smp ?? \"\";\r\n\r\n            direccion.altura = Number(dir.altura);\r\n            direccion.descripcion = dir.nombre;\r\n          } catch (error) {\r\n            if (this.debug) console.error(\"Error getting SMP:\", error);\r\n          }\r\n        }\r\n      }\r\n      return direccion;\r\n    });\r\n    return Promise.all(promises).then((results) => {\r\n      return results.filter(Boolean) as DireccionType[];\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Process streets from API response\r\n   */\r\n  private processCalles(calles: NormalizadorResponse[\"calles\"]): Calle[] {\r\n    if (!calles) return [];\r\n\r\n    return calles.map((calle) => ({\r\n      codigo: calle.cod_calle,\r\n      nombre: calle.nombre,\r\n      descripcion: calle.tipo ? `${calle.tipo} ${calle.nombre}` : calle.nombre,\r\n      tipo: \"CALLE\",\r\n      alturas: [\r\n        {\r\n          inicio: calle.altura?.inicial || 1,\r\n          fin: calle.altura?.final || 10000,\r\n        },\r\n      ],\r\n      partido: calle.partido,\r\n      localidad: calle.localidad,\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Get coordinates for an address\r\n   */\r\n  async getCoordinates(lugar: {\r\n    nombre: string;\r\n    descripcion: string;\r\n  }): Promise<Coordinates | undefined> {\r\n    try {\r\n      // Abort previous request if exists\r\n      this.abort();\r\n\r\n      // Create new AbortController for this request\r\n      this.lastRequest = new AbortController();\r\n\r\n      const url = `${USIG_WEBSERVICE_URL}/normalizar/?direccion=${encodeURIComponent(\r\n        lugar.nombre\r\n      )},${encodeURIComponent(lugar.descripcion)}&geocodificar=true&srid=4326`;\r\n\r\n      const config: AxiosRequestConfig = {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n        },\r\n        signal: this.lastRequest.signal,\r\n        timeout: this.serverTimeout,\r\n      };\r\n\r\n      const response = await axios.get<NormalizadorResponse>(url, config);\r\n\r\n      const direccion = response.data.direccionesNormalizadas?.[0];\r\n\r\n      if (direccion?.coordenadas) {\r\n        const coords = direccion.coordenadas;\r\n        return {\r\n          x: coords.x,\r\n          y: coords.y,\r\n          srid: coords.srid,\r\n        };\r\n      }\r\n\r\n      return undefined;\r\n    } catch (error) {\r\n      if (axios.isCancel(error)) {\r\n        if (this.debug) console.debug(\"Request was aborted\");\r\n      } else {\r\n        console.error(\"Error fetching coordinates:\", error);\r\n      }\r\n      return undefined;\r\n    } finally {\r\n      this.lastRequest = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get SMP (cadastral identifier) for an address\r\n   */\r\n  async getSMP(lugar: {\r\n    nombre: string;\r\n    descripcion: string;\r\n    tipo: string;\r\n    codigo?: string;\r\n    altura?: number | string;\r\n    calle?: {\r\n      codigo: string;\r\n    };\r\n  }): Promise<string | undefined> {\r\n    try {\r\n      // Abort previous request if exists\r\n      this.abort();\r\n\r\n      // Create new AbortController for this request\r\n      this.lastRequest = new AbortController();\r\n\r\n      const codigo = lugar.codigo || lugar.calle?.codigo;\r\n      if (!codigo || !lugar.altura) {\r\n        return undefined;\r\n      }\r\n\r\n      const url = `${CATASTRO_WEBSERVICE_URL}/parcela/?codigo_calle=${encodeURIComponent(\r\n        codigo\r\n      )}&altura=${encodeURIComponent(\r\n        String(lugar.altura)\r\n      )}&geocodificar=true&srid=4326`;\r\n\r\n      const config: AxiosRequestConfig = {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n        },\r\n        signal: this.lastRequest.signal,\r\n        timeout: this.serverTimeout,\r\n      };\r\n\r\n      const response = await axios.get<CatastroResponse>(url, config);\r\n\r\n      return response.data.smp;\r\n    } catch (error) {\r\n      if (axios.isCancel(error)) {\r\n        if (this.debug) console.debug(\"Request was aborted\");\r\n      } else {\r\n        console.error(\"Error fetching catastro data:\", error);\r\n      }\r\n      return undefined;\r\n    } finally {\r\n      this.lastRequest = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if the normalizer is initialized\r\n   */\r\n  static inicializado(): boolean {\r\n    return true;\r\n  }\r\n}\r\n","interface Loader2IconProps {\r\n  className?: string;\r\n  size?: number;\r\n  color?: string;\r\n}\r\n\r\nexport const LoaderIcon: React.FC<Loader2IconProps> = ({\r\n  className = \"\",\r\n  size = 24,\r\n  color = \"currentColor\",\r\n}) => {\r\n  return (\r\n    <svg\r\n      width={size}\r\n      height={size}\r\n      viewBox=\"0 0 24 24\"\r\n      fill=\"none\"\r\n      stroke={color}\r\n      strokeWidth=\"2\"\r\n      strokeLinecap=\"round\"\r\n      strokeLinejoin=\"round\"\r\n      className={className}\r\n    >\r\n      <path d=\"M21 12a9 9 0 1 1-6.219-8.56\" />\r\n    </svg>\r\n  );\r\n};\r\n","interface NavigationIconProps {\r\n  className?: string\r\n  size?: number\r\n  color?: string\r\n}\r\n\r\nexport const NavigationIcon: React.FC<NavigationIconProps> = ({\r\n  className = \"\",\r\n  size = 24,\r\n  color = \"currentColor\",\r\n}) => {\r\n  return (\r\n    <svg\r\n      width={size}\r\n      height={size}\r\n      viewBox=\"0 0 24 24\"\r\n      fill=\"none\"\r\n      stroke={color}\r\n      strokeWidth=\"2\"\r\n      strokeLinecap=\"round\"\r\n      strokeLinejoin=\"round\"\r\n      className={className}\r\n    >\r\n      <polygon points=\"3,11 22,2 13,21 11,13 3,11\" />\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default NavigationIcon\r\n","import { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport { ApiNormalizer } from \"@/lib/api-normalizer\";\r\nimport type { DireccionSuggestion, DireccionType, Calle } from \"../types/direction.types\";\r\nimport { LoaderIcon } from \"@/assets/Loader\";\r\nimport NavigationIcon from \"@/assets/Navigation\";\r\n\r\ninterface AddressSearchProps {\r\n  maxSuggestions?: number;\r\n  onAddressSelect: (address: DireccionSuggestion) => void;\r\n  onAddressesRemove: (index: number) => void;\r\n  selectedAddresses: DireccionSuggestion[];\r\n  placeholder?: string;\r\n  debug?: boolean;\r\n  className?: string;\r\n  inputClassName?: string;\r\n  suggestionsClassName?: string;\r\n  suggestionItemClassName?: string;\r\n  selectedAddressesClassName?: string;\r\n  loadingClassName?: string;\r\n  suggestionsContainerClassName?: string;\r\n  selectedAddressesContainerClassName?: string;\r\n  selectedAddressItemClassName?: string;\r\n  removeButtonClassName?: string;\r\n  errorClassName?: string;\r\n  iconClassName?: string;\r\n  titleClassName?: string;\r\n  subtitleClassName?: string;\r\n  coordsClassName?: string;\r\n  smpClassName?: string;\r\n  serverTimeout?: number;\r\n  isDebug?: boolean;\r\n  containerItemsClass?: string;\r\n}\r\n\r\nexport const AddressSearch: React.FC<AddressSearchProps> = ({\r\n  maxSuggestions = 10,\r\n  onAddressSelect,\r\n  onAddressesRemove,\r\n  placeholder = \"Buscar dirección o coordenadas...\",\r\n  debug = false,\r\n  className = \"\",\r\n  inputClassName = \"\",\r\n  selectedAddresses = [],\r\n  suggestionsClassName = \"\",\r\n  suggestionItemClassName = \"\",\r\n  selectedAddressesClassName = \"\",\r\n  loadingClassName = \"\",\r\n  suggestionsContainerClassName = \"\",\r\n  selectedAddressesContainerClassName = \"\",\r\n  selectedAddressItemClassName = \"\",\r\n  removeButtonClassName = \"\",\r\n  errorClassName = \"\",\r\n  iconClassName = \"\",\r\n  titleClassName = \"\",\r\n  coordsClassName = \"\",\r\n  smpClassName = \"\",\r\n  serverTimeout = 5000,\r\n  containerItemsClass = \"\",\r\n  isDebug = false,\r\n}) => {\r\n  const [searchText, setSearchText] = useState<string>(\"\");\r\n  const [suggestions, setSuggestions] = useState<DireccionSuggestion[]>([]);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [showSuggestions, setShowSuggestions] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const inputTimerRef = useRef<NodeJS.Timeout | null>(null);\r\n  const normalizadorRef = useRef<ApiNormalizer | null>(null);\r\n  // Initialize the ApiNormalizer on component mount\r\n  useEffect(() => {\r\n    normalizadorRef.current = new ApiNormalizer({\r\n      debug,\r\n      maxSuggestions,\r\n      serverTimeout,\r\n    });\r\n\r\n    return () => {\r\n      // Clean up any pending requests on unmount\r\n      if (inputTimerRef.current) {\r\n        clearTimeout(inputTimerRef.current);\r\n      }\r\n      if (normalizadorRef.current) {\r\n        normalizadorRef.current.abort();\r\n      }\r\n    };\r\n  }, [debug, maxSuggestions, serverTimeout]);\r\n\r\n  const convertToDireccionSuggestion = (\r\n    d: DireccionType | Calle\r\n  ): DireccionSuggestion => {\r\n    if (d.tipo === \"CALLE\") {\r\n      // It's a Calle type\r\n      return {\r\n        title: d.nombre,\r\n        subTitle: d.descripcion || \"CABA\",\r\n        type: \"CALLE\",\r\n        category: \"CALLE\",\r\n        suggesterName: \"Direcciones\",\r\n        data: {\r\n          nombre: d.nombre,\r\n          descripcion: d.descripcion || \"\",\r\n          tipo: \"CALLE\",\r\n          codigo: d.codigo,\r\n        },\r\n      };\r\n    } else {\r\n      // It's a DireccionType\r\n      return {\r\n        title: d.nombre,\r\n        subTitle: d.descripcion || \"CABA\",\r\n        type: d.tipoDireccion,\r\n        category: d.tipoDireccion,\r\n        suggesterName: \"Direcciones\",\r\n        data: {\r\n          nombre: d.nombre,\r\n          descripcion: d.descripcion || \"\",\r\n          tipo: d.tipo,\r\n          codigo: d.calle.codigo,\r\n          altura:\r\n            d.tipoDireccion === \"DIRECCION_CALLE_ALTURA\" ? d.altura : undefined,\r\n          calle: {\r\n            codigo: d.calle.codigo,\r\n          },\r\n          coordenadas: d.coordenadas,\r\n          smp: d.smp,\r\n          barrio: d.barrio,\r\n          comuna: d.comuna,\r\n        },\r\n      };\r\n    }\r\n  };\r\n\r\n  const getSuggestions = useCallback(\r\n    async (text: string) => {\r\n      if (debug) {\r\n        console.debug(`getSuggestions('${text}')`);\r\n      }\r\n\r\n      if (!normalizadorRef.current || !text || text.length < 3) {\r\n        setSuggestions([]);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        const direcciones = await normalizadorRef.current.normalizar(\r\n          text,\r\n          maxSuggestions\r\n        );\r\n        const results = direcciones.map(convertToDireccionSuggestion);\r\n\r\n        setSuggestions(results);\r\n\r\n        // Automatically show suggestions when we have results or when loading\r\n        setShowSuggestions(true);\r\n\r\n        if (results.length === 0) {\r\n          setError(\"No se encontraron resultados\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error getting suggestions:\", error);\r\n        setSuggestions([]);\r\n        setError(\"Error al buscar direcciones\");\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    },\r\n    [debug, maxSuggestions]\r\n  );\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value;\r\n    setSearchText(value);\r\n    setError(null);\r\n\r\n    // Clear previous timer\r\n    if (inputTimerRef.current) {\r\n      clearTimeout(inputTimerRef.current);\r\n    }\r\n\r\n    // Abort any ongoing request\r\n    if (normalizadorRef.current) {\r\n      normalizadorRef.current.abort();\r\n    }\r\n\r\n    // Set a new timer to delay the search\r\n    if (value.length >= 3) {\r\n      // Show suggestions container immediately when typing (even before results arrive)\r\n      setShowSuggestions(true);\r\n      setIsLoading(true);\r\n\r\n      inputTimerRef.current = setTimeout(() => {\r\n        getSuggestions(value);\r\n      }, 300);\r\n    } else {\r\n      setSuggestions([]);\r\n      setShowSuggestions(false);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSelectSuggestion = (suggestion: DireccionSuggestion) => {\r\n    // Add to selected addresses if not already there\r\n    if (\r\n      !selectedAddresses.some(\r\n        (addr) => addr.data.nombre === suggestion.data.nombre\r\n      )\r\n    ) {\r\n      onAddressSelect(suggestion);\r\n    }\r\n\r\n    // Clear input and suggestions\r\n    setSearchText(\"\");\r\n    setSuggestions([]);\r\n    setShowSuggestions(false);\r\n  };\r\n\r\n  const handleRemoveAddress = (index: number) => {\r\n    onAddressesRemove(index);\r\n  };\r\n\r\n  const handleInputFocus = () => {\r\n    if (searchText.length >= 3) {\r\n      setShowSuggestions(true);\r\n    }\r\n  };\r\n\r\n  const handleInputBlur = () => {\r\n    // Delay hiding suggestions to allow clicking on them\r\n    setTimeout(() => {\r\n      setShowSuggestions(false);\r\n    }, 200);\r\n  };\r\n\r\n  return (\r\n    <div className={`w-full ${className}`}>\r\n      <div className=\"relative max-w-[500px]\">\r\n        <input\r\n          type=\"text\"\r\n          value={searchText}\r\n          onChange={handleInputChange}\r\n          onFocus={handleInputFocus}\r\n          onBlur={handleInputBlur}\r\n          placeholder={placeholder}\r\n          className={`w-full h-[24px] p-[8px] border rounded ${inputClassName}`}\r\n        />\r\n        {isLoading && (\r\n          <div\r\n            className={`absolute right-[0] top-1/2 transform -translate-y-1/2 ${loadingClassName}`}\r\n          >\r\n            <LoaderIcon className=\"h-4 w-4 text-gray-500 animate-spin\" />\r\n          </div>\r\n        )}\r\n\r\n        {(showSuggestions || isLoading) && (\r\n          <div\r\n            className={`absolute z-10 w-full bg-[#FFFFFF] border border-t-0 rounded shadow-lg max-h-[200px] overflow-auto px-[8px] ${suggestionsContainerClassName}`}\r\n          >\r\n            {isLoading ? (\r\n              <div\r\n                className={`p-[8px] flex items-center justify-center gap-[8px] text-gray-500  ${suggestionsClassName}`}\r\n              >\r\n                <LoaderIcon className=\"h-5 w-2 animate-spin mb-2\" />\r\n                <span>Buscando direcciones...</span>\r\n              </div>\r\n            ) : suggestions.length > 0 ? (\r\n              suggestions.map((suggestion, index) => (\r\n                <div\r\n                  key={`${suggestion.data.nombre}-${index}`}\r\n                  className={`my-[8px] border-b border-[#b8b5b4] last:border-b-0 cursor-pointer hover:bg-[#dfe0e1] transition duration-300 ease-in-out bg-white rounded-[4px] w-[100%] ${suggestionItemClassName}`}\r\n                  onClick={() => {\r\n                    if (suggestion.data.coordenadas && suggestion.data.coordenadas.x && suggestion.data.coordenadas.y) {\r\n                      handleSelectSuggestion(suggestion)\r\n                    }\r\n                  }}\r\n                >\r\n                  <div className=\"flex items-center gap-[8px]\">\r\n                    <div>\r\n                      <NavigationIcon\r\n                        className={`h-4 text-[#0042ff] ${iconClassName}`}\r\n                      />\r\n                    </div>\r\n                    <div className=\"flex flex-center gap-[8px]\">\r\n                      <span className={`font-medium text-[14px] truncate ${titleClassName}`}>\r\n                        {suggestion.title}.\r\n                      </span>\r\n\r\n                      {suggestion.data.coordenadas && suggestion.data.coordenadas.x && suggestion.data.coordenadas.y && (\r\n                        <span\r\n                          className={`text-xs text-gray-400 truncate ${coordsClassName}`}\r\n                        >\r\n                          Coord: {suggestion.data.coordenadas.x},{\" \"}\r\n                          {suggestion.data.coordenadas.y}\r\n                        </span>\r\n                      )}\r\n                      {suggestion.data.smp && (\r\n                        <span\r\n                          className={`text-xs text-gray-400 ${smpClassName}`}\r\n                        >\r\n                          SMP: {suggestion.data.smp}\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))\r\n            ) : searchText.length >= 3 ? (\r\n              <div className={`p-[8px] text-center text-red-500 ${errorClassName}`}>\r\n                {error || \"No se encontraron resultados\"}\r\n              </div>\r\n            ) : (\r\n              <div\r\n                className={`p-4 text-center text-gray-500 ${suggestionsClassName}`}\r\n              >\r\n                Ingrese al menos 3 caracteres para buscar\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {error && !isLoading && !showSuggestions && (\r\n          <div className={`mt-[8px] text-sm text-red-500 ${errorClassName}`}>\r\n            {error}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {isDebug && (\r\n        <>\r\n          {\r\n            selectedAddresses.length > 0 && (\r\n              <div\r\n                className={`${selectedAddressesClassName} ${selectedAddressesContainerClassName}`}\r\n              >\r\n                <h3 className=\"text-sm font-medium mb-2\">\r\n                  Direcciones seleccionadas:\r\n                </h3>\r\n                <ul className=\"space-y-2\">\r\n                  {selectedAddresses.map((address, index) => (\r\n                    <li\r\n                      key={`selected-${index}`}\r\n                      className={`flex justify-between items-center p-2 bg-gray-50 rounded ${selectedAddressItemClassName}`}\r\n                    >\r\n                      <div className={`flex items-center gap-[8px] ${containerItemsClass}`}>\r\n                        <div className=\"mt-1\">\r\n                          <NavigationIcon\r\n                            className={`h-4 w-4 text-[#0042ff] ${iconClassName}`}\r\n                          />\r\n                        </div>\r\n                        <div className=\"flex flex-center gap-[8px]\">\r\n                          <div className={`font-medium ${titleClassName}`}>\r\n                            {address.title}.\r\n                          </div>\r\n                          {address.data.coordenadas && (\r\n                            <div\r\n                              className={`text-xs text-gray-400 ${coordsClassName}`}\r\n                            >\r\n                              Coord: {address.data.coordenadas.x.toFixed(6)},{\" \"}\r\n                              {address.data.coordenadas.y.toFixed(6)}\r\n                            </div>\r\n                          )}\r\n                          {address.data.smp && (\r\n                            <div className={`text-xs text-gray-400 ${smpClassName}`}>\r\n                              SMP: {address.data.smp}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => handleRemoveAddress(index)}\r\n                        className={`text-[#FFF] bg-[#ff0000] rounded-[4px] border-0 h-[24px] w-[24px] cursor-pointer transition duration-300 ease-in-out hover:scale-125 ${removeButtonClassName}`}\r\n                      >\r\n                        ×\r\n                      </button>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            )\r\n          }\r\n        </>\r\n\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import type React from \"react\";\r\nimport { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport { ApiNormalizer } from \"@/lib/api-normalizer\";\r\nimport type {\r\n  DireccionSuggestion,\r\n  DireccionType,\r\n  Calle,\r\n} from \"../types/direction.types\";\r\n\r\ninterface AddressSearchOptions {\r\n  maxSuggestions?: number;\r\n  debug?: boolean;\r\n  serverTimeout?: number;\r\n}\r\n\r\ninterface UseAddressSearchReturn {\r\n  searchText: string;\r\n  setSearchText: (text: string) => void;\r\n  suggestions: DireccionSuggestion[];\r\n  selectedAddresses: DireccionSuggestion[];\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  showSuggestions: boolean;\r\n  setShowSuggestions: (show: boolean) => void;\r\n  handleInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  handleSelectSuggestion: (suggestion: DireccionSuggestion) => void;\r\n  handleRemoveAddress: (index: number) => void;\r\n  handleInputFocus: () => void;\r\n  handleInputBlur: () => void;\r\n}\r\n\r\nexport function useAddressSearch(\r\n  options: AddressSearchOptions = {}\r\n): UseAddressSearchReturn {\r\n  const { maxSuggestions = 10, debug = false, serverTimeout = 5000 } = options;\r\n\r\n  const [searchText, setSearchText] = useState<string>(\"\");\r\n  const [suggestions, setSuggestions] = useState<DireccionSuggestion[]>([]);\r\n  const [selectedAddresses, setSelectedAddresses] = useState<\r\n    DireccionSuggestion[]\r\n  >([]);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [showSuggestions, setShowSuggestions] = useState<boolean>(false);\r\n  const inputTimerRef = useRef<NodeJS.Timeout | null>(null);\r\n  const normalizadorRef = useRef<ApiNormalizer | null>(null);\r\n\r\n  // Initialize the ApiNormalizer on component mount\r\n  useEffect(() => {\r\n    normalizadorRef.current = new ApiNormalizer({\r\n      debug,\r\n      maxSuggestions,\r\n      serverTimeout,\r\n    });\r\n\r\n    return () => {\r\n      // Clean up any pending requests on unmount\r\n      if (inputTimerRef.current) {\r\n        clearTimeout(inputTimerRef.current);\r\n      }\r\n      if (normalizadorRef.current) {\r\n        normalizadorRef.current.abort();\r\n      }\r\n    };\r\n  }, [debug, maxSuggestions, serverTimeout]);\r\n\r\n  const convertToDireccionSuggestion = (\r\n    d: DireccionType | Calle\r\n  ): DireccionSuggestion => {\r\n    if (d.tipo === \"CALLE\") {\r\n      // It's a Calle type\r\n      return {\r\n        title: d.nombre,\r\n        subTitle: d.descripcion || \"CABA\",\r\n        type: \"CALLE\",\r\n        category: \"CALLE\",\r\n        suggesterName: \"Direcciones\",\r\n        data: {\r\n          nombre: d.nombre,\r\n          descripcion: d.descripcion || \"\",\r\n          tipo: \"CALLE\",\r\n          codigo: d.codigo,\r\n        },\r\n      };\r\n    } else {\r\n      // It's a DireccionType\r\n      return {\r\n        title: d.nombre,\r\n        subTitle: d.descripcion || \"CABA\",\r\n        type: d.tipoDireccion,\r\n        category: d.tipoDireccion,\r\n        suggesterName: \"Direcciones\",\r\n        data: {\r\n          nombre: d.nombre,\r\n          descripcion: d.descripcion || \"\",\r\n          tipo: d.tipo,\r\n          codigo: d.calle.codigo,\r\n          altura:\r\n            d.tipoDireccion === \"DIRECCION_CALLE_ALTURA\" ? d.altura : undefined,\r\n          calle: {\r\n            codigo: d.calle.codigo,\r\n          },\r\n          coordenadas: d.coordenadas,\r\n          smp: d.smp,\r\n        },\r\n      };\r\n    }\r\n  };\r\n\r\n  const fetchSuggestions = useCallback(\r\n    async (text: string) => {\r\n      if (debug) {\r\n        console.debug(`fetchSuggestions('${text}')`);\r\n      }\r\n\r\n      if (!normalizadorRef.current || !text || text.length < 3) {\r\n        setSuggestions([]);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        const direcciones = await normalizadorRef.current.normalizar(\r\n          text,\r\n          maxSuggestions\r\n        );\r\n        const results = direcciones.map(convertToDireccionSuggestion);\r\n\r\n        setSuggestions(results);\r\n\r\n        if (results.length === 0) {\r\n          setError(\"No se encontraron resultados\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error getting suggestions:\", error);\r\n        setSuggestions([]);\r\n        setError(\"Error al buscar direcciones\");\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    },\r\n    [debug, maxSuggestions]\r\n  );\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value;\r\n    setSearchText(value);\r\n    setError(null);\r\n\r\n    // Clear previous timer\r\n    if (inputTimerRef.current) {\r\n      clearTimeout(inputTimerRef.current);\r\n    }\r\n\r\n    // Abort any ongoing request\r\n    if (normalizadorRef.current) {\r\n      normalizadorRef.current.abort();\r\n    }\r\n\r\n    // Set a new timer to delay the search\r\n    if (value.length >= 3) {\r\n      inputTimerRef.current = setTimeout(() => {\r\n        fetchSuggestions(value);\r\n      }, 3000);\r\n    } else {\r\n      setSuggestions([]);\r\n    }\r\n  };\r\n\r\n  const handleSelectSuggestion = (suggestion: DireccionSuggestion) => {\r\n    // Add to selected addresses if not already there\r\n    if (\r\n      !selectedAddresses.some(\r\n        (addr) => addr.data.nombre === suggestion.data.nombre\r\n      )\r\n    ) {\r\n      setSelectedAddresses((prev) => [...prev, suggestion]);\r\n    }\r\n\r\n    // Clear input and suggestions\r\n    setSearchText(\"\");\r\n    setSuggestions([]);\r\n    setShowSuggestions(false);\r\n  };\r\n\r\n  const handleRemoveAddress = (index: number) => {\r\n    setSelectedAddresses((prev) => {\r\n      const newAddresses = [...prev];\r\n      newAddresses.splice(index, 1);\r\n      return newAddresses;\r\n    });\r\n  };\r\n\r\n  const handleInputFocus = () => {\r\n    if (searchText.length >= 3 && suggestions.length > 0) {\r\n      setShowSuggestions(true);\r\n    }\r\n  };\r\n\r\n  const handleInputBlur = () => {\r\n    // Delay hiding suggestions to allow clicking on them\r\n    setTimeout(() => {\r\n      setShowSuggestions(false);\r\n    }, 200);\r\n  };\r\n\r\n  return {\r\n    searchText,\r\n    setSearchText,\r\n    suggestions,\r\n    selectedAddresses,\r\n    isLoading,\r\n    error,\r\n    showSuggestions,\r\n    setShowSuggestions,\r\n    handleInputChange,\r\n    handleSelectSuggestion,\r\n    handleRemoveAddress,\r\n    handleInputFocus,\r\n    handleInputBlur,\r\n  };\r\n}\r\n"],"names":["nombresAvenidasBase","normalizarComoAvenida","calle","match","find","nombre","toLowerCase","includes","capitalizar","str","split","map","p","charAt","toUpperCase","slice","join","USIG_WEBSERVICE_URL","ApiNormalizer","debug","maxSuggestions","lastRequest","serverTimeout","constructor","options","this","abort","console","normalizar","maxOptions","AbortController","results","addresses","searchAddresses","coordsMatch","parseCoordinates","coordResults","reverseGeocode","x","y","error","axios","isCancel","interseccionRegex","esInterseccion","test","partes","s","trim","length","calle1","calle2","coords","obtenerCoordenadasInterseccion","barrioYComuna","obtenerBarrioYComuna","calleObj1","codigo","tipo","alturas","calleObj2","tipoDireccion","calleCruce","coordenadas","srid","barrio","comuna","url","encodeURIComponent","config","headers","Accept","signal","timeout","response","get","data","direccionesNormalizadas","direccionesCABA","filter","dir","cod","cod_partido","nombrePartido","nombre_partido","nombreLocalidad","nombre_localidad","direccionesEnriquecidas","Promise","all","async","obtenerCoordenadas","nombre_calle","Number","altura","cod_calle","coordenadasStr","processDireccionesNormalizadas","calles","processCalles","lat","lon","capas","normalizadaCalle1","normalizadaCalle2","toLocaleUpperCase","jsonString","replace","parsed","JSON","parse","numero","geocodingUrl","geocodingResponse","conversionUrl","conversionResponse","resultado","cleanStr","patterns","pattern","parseFloat","direccion","descripcion","inicio","fin","toFixed","nombre_barrio","nombre_comuna","direcciones","resolve","promises","calleNames","c","undefined","smp","getSMP","then","Boolean","inicial","final","partido","localidad","getCoordinates","lugar","String","inicializado","LoaderIcon","className","size","color","_jsx","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","NavigationIcon","points","onAddressSelect","onAddressesRemove","placeholder","inputClassName","selectedAddresses","suggestionsClassName","suggestionItemClassName","selectedAddressesClassName","loadingClassName","suggestionsContainerClassName","selectedAddressesContainerClassName","selectedAddressItemClassName","removeButtonClassName","errorClassName","iconClassName","titleClassName","coordsClassName","smpClassName","containerItemsClass","isDebug","searchText","setSearchText","useState","suggestions","setSuggestions","isLoading","setIsLoading","showSuggestions","setShowSuggestions","setError","inputTimerRef","useRef","normalizadorRef","useEffect","current","clearTimeout","convertToDireccionSuggestion","title","subTitle","type","category","suggesterName","getSuggestions","useCallback","text","_jsxs","children","jsx","value","onChange","e","target","setTimeout","onFocus","onBlur","jsxs","suggestion","index","onClick","some","addr","handleSelectSuggestion","_Fragment","Fragment","address","handleRemoveAddress","setSelectedAddresses","fetchSuggestions","handleInputChange","prev","newAddresses","splice","handleInputFocus","handleInputBlur"],"mappings":"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"}