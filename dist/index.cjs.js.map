{"version":3,"file":"index.cjs.js","sources":["../src/lib/api-normalizer.ts","../src/assets/Loader.tsx","../src/assets/Navigation.tsx","../src/components/search.tsx","../src/hooks/useAddressSearch.tsx"],"sourcesContent":["import type {\r\n  Calle,\r\n  DireccionType,\r\n  DireccionCalleAltura,\r\n  DireccionCalleYCalle,\r\n  Coordinates,\r\n} from \"../types/direction.types\";\r\nimport axios, { type AxiosRequestConfig } from \"axios\";\r\n\r\n\r\n// API endpoints\r\nconst USIG_WEBSERVICE_URL = \"https://servicios.usig.buenosaires.gob.ar\";\r\nconst CATASTRO_WEBSERVICE_URL = \"https://epok.buenosaires.gob.ar/catastro\";\r\n\r\n// Response types\r\ninterface NormalizadorResponse {\r\n  direccionesNormalizadas?: Array<{\r\n    direccion?: string;\r\n    tipo?: string;\r\n    nombre?: string;\r\n    altura?: string;\r\n    cod_calle?: string;\r\n    cod_partido?: string;\r\n    partido?: string;\r\n    cod_localidad?: string;\r\n    localidad?: string;\r\n    coordenadas?: {\r\n      x: string;\r\n      y: string;\r\n      srid: number;\r\n    };\r\n  }>;\r\n  calles?: Array<{\r\n    nombre: string;\r\n    tipo?: string;\r\n    cod_calle: string;\r\n    altura?: {\r\n      inicial: number;\r\n      final: number;\r\n    };\r\n    partido?: string;\r\n    localidad?: string;\r\n  }>;\r\n  error?: string;\r\n}\r\n\r\ninterface CatastroResponse {\r\n  smp?: string;\r\n  error?: string;\r\n}\r\n\r\ninterface ReverseGeocodingResponse {\r\n  direccion?: string;\r\n  tipo?: string;\r\n  nombre?: string;\r\n  altura?: string;\r\n  cod_calle?: string;\r\n  cod_partido?: string;\r\n  partido?: string;\r\n  cod_localidad?: string;\r\n  localidad?: string;\r\n  coordenadas?: {\r\n    x: string;\r\n    y: string;\r\n    srid: number;\r\n  };\r\n  error?: string;\r\n}\r\n\r\nexport class ApiNormalizer {\r\n  private debug: boolean;\r\n  private maxSuggestions: number;\r\n  private lastRequest: AbortController | null;\r\n  private serverTimeout: number;\r\n\r\n  constructor(\r\n    options: {\r\n      debug?: boolean;\r\n      maxSuggestions?: number;\r\n      serverTimeout?: number;\r\n    } = {}\r\n  ) {\r\n    this.debug = options.debug || false;\r\n    this.maxSuggestions = options.maxSuggestions || 10;\r\n    this.serverTimeout = options.serverTimeout || 5000;\r\n    this.lastRequest = null;\r\n  }\r\n\r\n  /**\r\n   * Abort any ongoing request\r\n   */\r\n  abort(): void {\r\n    if (this.lastRequest) {\r\n      this.lastRequest.abort();\r\n      this.lastRequest = null;\r\n      if (this.debug) console.debug(\"Request aborted\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Normalizes an address string and returns matching addresses\r\n   */\r\n  async normalizar(\r\n    str: string,\r\n    maxOptions: number = this.maxSuggestions\r\n  ): Promise<Array<DireccionType | Calle>> {\r\n    if (this.debug) {\r\n      console.debug(`ApiNormalizer.normalizar('${str}', ${maxOptions})`);\r\n    }\r\n\r\n    // Abort previous request if exists\r\n    this.abort();\r\n\r\n    // Create new AbortController for this request\r\n    this.lastRequest = new AbortController();\r\n\r\n    try {\r\n      let results: Array<DireccionType | Calle> = [];\r\n\r\n      // 1. First search for addresses\r\n      const addresses = await this.searchAddresses(str, maxOptions);\r\n      results = [...results, ...addresses];\r\n\r\n      // 2. Check if input is coordinates and search if it is\r\n      const coordsMatch = this.parseCoordinates(str);\r\n      if (coordsMatch) {\r\n        const coordResults = await this.reverseGeocode(\r\n          coordsMatch.x,\r\n          coordsMatch.y\r\n        );\r\n        results = [...results, ...coordResults];\r\n      }\r\n\r\n      return results.slice(0, maxOptions);\r\n    } catch (error) {\r\n      if (axios.isCancel(error)) {\r\n        if (this.debug) console.debug(\"Request was cancelled\");\r\n      } else {\r\n        console.error(\"Error normalizing address:\", error);\r\n      }\r\n      return [];\r\n    } finally {\r\n      this.lastRequest = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Search for addresses using the USIG API\r\n   */\r\n  private async searchAddresses(\r\n    str: string,\r\n    maxOptions: number\r\n  ): Promise<Array<DireccionType | Calle>> {\r\n    try {\r\n      const url = `${USIG_WEBSERVICE_URL}/normalizar/?direccion=${encodeURIComponent(\r\n        str\r\n      )}&geocodificar=true&max=${maxOptions}`;\r\n\r\n      const config: AxiosRequestConfig = {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n        },\r\n        signal: this.lastRequest?.signal,\r\n        timeout: this.serverTimeout,\r\n      };\r\n\r\n      const response = await axios.get<NormalizadorResponse>(url, config);\r\n\r\n      if (response.data.error) {\r\n        if (this.debug) console.error(\"API error:\", response.data.error);\r\n        return [];\r\n      }\r\n\r\n      // Process direccionesNormalizadas (addresses)\r\n      if (\r\n        response.data.direccionesNormalizadas &&\r\n        response.data.direccionesNormalizadas.length > 0\r\n      ) {\r\n        return this.processDireccionesNormalizadas(\r\n          response.data.direccionesNormalizadas\r\n        );\r\n      }\r\n\r\n      // Process calles (streets)\r\n      if (response.data.calles && response.data.calles.length > 0) {\r\n        return this.processCalles(response.data.calles);\r\n      }\r\n\r\n      return [];\r\n    } catch (error) {\r\n      if (axios.isCancel(error)) {\r\n        if (this.debug) console.log(\"Address search request was cancelled\");\r\n      } else {\r\n        console.error(\"Error searching addresses:\", error);\r\n      }\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse coordinates from input string\r\n   * Supports formats like \"lat,lng\", \"x,y\", \"-34.603722,-58.381592\"\r\n   */\r\n  private parseCoordinates(str: string): Coordinates | null {\r\n    // Remove any spaces\r\n    const cleanStr = str.trim().replace(/\\s+/g, \"\");\r\n\r\n    // Match common coordinate formats\r\n    const patterns = [\r\n      // Lat,Lng format (e.g., -34.603722,-58.381592)\r\n      /^(-?\\d+\\.?\\d*),(-?\\d+\\.?\\d*)$/,\r\n      // X,Y format with optional text (e.g., \"x: 123.45, y: 678.90\")\r\n      /x:?(-?\\d+\\.?\\d*)[,\\s]+y:?(-?\\d+\\.?\\d*)/i,\r\n      // Y,X format with optional text (e.g., \"y: 678.90, x: 123.45\")\r\n      /y:?(-?\\d+\\.?\\d*)[,\\s]+x:?(-?\\d+\\.?\\d*)/i,\r\n    ];\r\n\r\n    for (const pattern of patterns) {\r\n      const match = cleanStr.match(pattern);\r\n      if (match) {\r\n        if (pattern === patterns[0]) {\r\n          // Lat,Lng format\r\n          return {\r\n            y: Number.parseFloat(match[1]), // Latitude is Y\r\n            x: Number.parseFloat(match[2]), // Longitude is X\r\n          };\r\n        } else if (pattern === patterns[1]) {\r\n          // X,Y format\r\n          return {\r\n            x: Number.parseFloat(match[1]),\r\n            y: Number.parseFloat(match[2]),\r\n          };\r\n        } else if (pattern === patterns[2]) {\r\n          // Y,X format\r\n          return {\r\n            y: Number.parseFloat(match[1]),\r\n            x: Number.parseFloat(match[2]),\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Reverse geocode coordinates to get an address\r\n   */\r\n  private async reverseGeocode(x: number, y: number): Promise<DireccionType[]> {\r\n    if (this.debug) {\r\n      console.debug(`ApiNormalizer.reverseGeocode(${x}, ${y})`);\r\n    }\r\n\r\n    // Abort previous request if exists\r\n    this.abort();\r\n\r\n    // Create new AbortController for this request\r\n    this.lastRequest = new AbortController();\r\n\r\n    try {\r\n      const url = `${USIG_WEBSERVICE_URL}/reverseGeocoderLugares/?x=${x}&y=${y}&srid=4326`;\r\n\r\n      const config: AxiosRequestConfig = {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n        },\r\n        signal: this.lastRequest.signal,\r\n        timeout: this.serverTimeout,\r\n      };\r\n\r\n      const response = await axios.get<ReverseGeocodingResponse>(url, config);\r\n\r\n      if (response.data.error) {\r\n        if (this.debug)\r\n          console.error(\"Reverse geocoding API error:\", response.data.error);\r\n        return [];\r\n      }\r\n\r\n      if (!response.data.direccion) {\r\n        return [];\r\n      }\r\n\r\n      // Create a base calle object\r\n      const calle: Calle = {\r\n        codigo: response.data.cod_calle || \"coord\",\r\n        nombre: response.data.nombre || response.data.direccion || \"Coordenada\",\r\n        descripcion: response.data.direccion || \"Coordenada\",\r\n        tipo: \"CALLE\",\r\n        alturas: [\r\n          {\r\n            inicio: 1,\r\n            fin: 10000, // Default range\r\n          },\r\n        ],\r\n      };\r\n\r\n      // Parse altura if available\r\n      let altura = 0;\r\n      if (response.data.altura) {\r\n        altura = Number.parseInt(response.data.altura, 10);\r\n      }\r\n\r\n      // Create a DireccionCalleAltura object\r\n      const direccion: DireccionCalleAltura = {\r\n        calle,\r\n        altura: altura || 1, // Default to 1 if no number found\r\n        tipoDireccion: \"DIRECCION_CALLE_ALTURA\",\r\n        tipo: \"DIRECCION\",\r\n        nombre:\r\n          response.data.direccion ||\r\n          `Coordenada (${x.toFixed(6)}, ${y.toFixed(6)})`,\r\n        descripcion: `Coordenada (${x.toFixed(6)}, ${y.toFixed(6)})`,\r\n        coordenadas: {\r\n          x,\r\n          y,\r\n          srid: response.data.coordenadas?.srid || 4326,\r\n        },\r\n      };\r\n\r\n      return [direccion];\r\n    } catch (error) {\r\n      if (axios.isCancel(error)) {\r\n        if (this.debug) console.log(\"Reverse geocoding request was cancelled\");\r\n      } else {\r\n        console.error(\"Error in reverse geocoding:\", error);\r\n      }\r\n      return [];\r\n    } finally {\r\n      this.lastRequest = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process normalized addresses from API response\r\n   */\r\n  private processDireccionesNormalizadas(\r\n    direcciones: NormalizadorResponse[\"direccionesNormalizadas\"]\r\n  ): Promise<DireccionType[]> {\r\n    if (!direcciones) return Promise.resolve([]);\r\n\r\n    const promises = direcciones.map(async (dir) => {\r\n      // Skip invalid addresses\r\n      if (!dir.direccion || !dir.cod_calle) return null;\r\n\r\n      // Create a base calle object\r\n      const calle: Calle = {\r\n        codigo: dir.cod_calle,\r\n        nombre: dir.nombre || dir.direccion.split(\" \")[0],\r\n        descripcion: dir.direccion,\r\n        tipo: \"CALLE\",\r\n        alturas: [\r\n          {\r\n            inicio: 1,\r\n            fin: 10000, // Default range\r\n          },\r\n        ],\r\n      };\r\n\r\n      // Determine if it's a street intersection or street with number\r\n      const isIntersection = dir.direccion.includes(\" y \");\r\n      let direccion: DireccionType;\r\n\r\n      if (isIntersection) {\r\n        // It's a street intersection\r\n        const calleNames = dir.direccion.split(\" y \").map((c) => c.trim());\r\n\r\n        // We need to create a second calle object for the intersection\r\n        // In a real app, you might want to make another API call to get details\r\n        // For now, we'll create a mock second street\r\n        const calleCruce: Calle = {\r\n          codigo: `${dir.cod_calle}_cruce`,\r\n          nombre: calleNames[1] || \"Calle cruce\",\r\n          descripcion: calleNames[1] || \"Calle cruce\",\r\n          tipo: \"CALLE\",\r\n          alturas: [\r\n            {\r\n              inicio: 1,\r\n              fin: 10000,\r\n            },\r\n          ],\r\n        };\r\n\r\n        direccion = {\r\n          calle,\r\n          calleCruce,\r\n          tipoDireccion: \"DIRECCION_CALLE_Y_CALLE\",\r\n          tipo: \"DIRECCION\",\r\n          nombre: dir.direccion,\r\n          descripcion: dir.direccion,\r\n          coordenadas: dir.coordenadas\r\n            ? {\r\n                x: Number.parseFloat(dir.coordenadas.x),\r\n                y: Number.parseFloat(dir.coordenadas.y),\r\n                srid: dir.coordenadas.srid,\r\n              }\r\n            : undefined,\r\n        } as DireccionCalleYCalle;\r\n      } else {\r\n        // It's a street with number\r\n        const altura = dir.altura ? Number.parseInt(dir.altura, 10) : 0;\r\n\r\n        direccion = {\r\n          calle,\r\n          altura,\r\n          tipoDireccion: \"DIRECCION_CALLE_ALTURA\",\r\n          tipo: \"DIRECCION\",\r\n          nombre: dir.direccion,\r\n          descripcion: dir.direccion,\r\n          coordenadas: dir.coordenadas\r\n            ? {\r\n                x: Number.parseFloat(dir.coordenadas.x),\r\n                y: Number.parseFloat(dir.coordenadas.y),\r\n                srid: dir.coordenadas.srid,\r\n              }\r\n            : undefined,\r\n        } as DireccionCalleAltura;\r\n\r\n        // Get SMP if it's a street with number\r\n        if (altura > 0) {\r\n          try {\r\n            const smp = await this.getSMP({\r\n              nombre: dir.direccion,\r\n              descripcion: dir.direccion || \"\",\r\n              tipo: \"DIRECCION\",\r\n              codigo: dir.cod_calle,\r\n              altura: dir.altura,\r\n              calle: {\r\n                codigo: dir.cod_calle,\r\n              },\r\n            });\r\n            if (smp) {\r\n              direccion.smp = smp;\r\n            }\r\n          } catch (error) {\r\n            if (this.debug) console.error(\"Error getting SMP:\", error);\r\n          }\r\n        }\r\n      }\r\n\r\n      return direccion;\r\n    });\r\n\r\n    return Promise.all(promises).then(\r\n      (results) => results.filter(Boolean) as DireccionType[]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Process streets from API response\r\n   */\r\n  private processCalles(calles: NormalizadorResponse[\"calles\"]): Calle[] {\r\n    if (!calles) return [];\r\n\r\n    return calles.map((calle) => ({\r\n      codigo: calle.cod_calle,\r\n      nombre: calle.nombre,\r\n      descripcion: calle.tipo ? `${calle.tipo} ${calle.nombre}` : calle.nombre,\r\n      tipo: \"CALLE\",\r\n      alturas: [\r\n        {\r\n          inicio: calle.altura?.inicial || 1,\r\n          fin: calle.altura?.final || 10000,\r\n        },\r\n      ],\r\n      partido: calle.partido,\r\n      localidad: calle.localidad,\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Get coordinates for an address\r\n   */\r\n  async getCoordinates(lugar: {\r\n    nombre: string;\r\n    descripcion: string;\r\n  }): Promise<Coordinates | undefined> {\r\n    try {\r\n      // Abort previous request if exists\r\n      this.abort();\r\n\r\n      // Create new AbortController for this request\r\n      this.lastRequest = new AbortController();\r\n\r\n      const url = `${USIG_WEBSERVICE_URL}/normalizar/?direccion=${encodeURIComponent(\r\n        lugar.nombre\r\n      )},${encodeURIComponent(lugar.descripcion)}&geocodificar=true&srid=4326`;\r\n\r\n      const config: AxiosRequestConfig = {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n        },\r\n        signal: this.lastRequest.signal,\r\n        timeout: this.serverTimeout,\r\n      };\r\n\r\n      const response = await axios.get<NormalizadorResponse>(url, config);\r\n\r\n      const direccion = response.data.direccionesNormalizadas?.[0];\r\n\r\n      if (direccion?.coordenadas) {\r\n        const coords = direccion.coordenadas;\r\n        return {\r\n          x: Number.parseFloat(coords.x),\r\n          y: Number.parseFloat(coords.y),\r\n          srid: coords.srid,\r\n        };\r\n      }\r\n\r\n      return undefined;\r\n    } catch (error) {\r\n      if (axios.isCancel(error)) {\r\n        if (this.debug) console.debug(\"Request was aborted\");\r\n      } else {\r\n        console.error(\"Error fetching coordinates:\", error);\r\n      }\r\n      return undefined;\r\n    } finally {\r\n      this.lastRequest = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get SMP (cadastral identifier) for an address\r\n   */\r\n  async getSMP(lugar: {\r\n    nombre: string;\r\n    descripcion: string;\r\n    tipo: string;\r\n    codigo?: string;\r\n    altura?: string | number;\r\n    calle?: {\r\n      codigo: string;\r\n    };\r\n  }): Promise<string | undefined> {\r\n    try {\r\n      // Abort previous request if exists\r\n      this.abort();\r\n\r\n      // Create new AbortController for this request\r\n      this.lastRequest = new AbortController();\r\n\r\n      const codigo = lugar.codigo || lugar.calle?.codigo;\r\n      if (!codigo || !lugar.altura) {\r\n        return undefined;\r\n      }\r\n\r\n      const url = `${CATASTRO_WEBSERVICE_URL}/parcela/?codigo_calle=${encodeURIComponent(\r\n        codigo\r\n      )}&altura=${encodeURIComponent(\r\n        String(lugar.altura)\r\n      )}&geocodificar=true&srid=4326`;\r\n\r\n      const config: AxiosRequestConfig = {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n        },\r\n        signal: this.lastRequest.signal,\r\n        timeout: this.serverTimeout,\r\n      };\r\n\r\n      const response = await axios.get<CatastroResponse>(url, config);\r\n\r\n      return response.data.smp;\r\n    } catch (error) {\r\n      if (axios.isCancel(error)) {\r\n        if (this.debug) console.log(\"Request was aborted\");\r\n      } else {\r\n        console.error(\"Error fetching catastro data:\", error);\r\n      }\r\n      return undefined;\r\n    } finally {\r\n      this.lastRequest = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if the normalizer is initialized\r\n   */\r\n  static inicializado(): boolean {\r\n    return true;\r\n  }\r\n}\r\n","interface Loader2IconProps {\r\n  className?: string;\r\n  size?: number;\r\n  color?: string;\r\n}\r\n\r\nexport const LoaderIcon: React.FC<Loader2IconProps> = ({\r\n  className = \"\",\r\n  size = 24,\r\n  color = \"currentColor\",\r\n}) => {\r\n  return (\r\n    <svg\r\n      width={size}\r\n      height={size}\r\n      viewBox=\"0 0 24 24\"\r\n      fill=\"none\"\r\n      stroke={color}\r\n      strokeWidth=\"2\"\r\n      strokeLinecap=\"round\"\r\n      strokeLinejoin=\"round\"\r\n      className={className}\r\n    >\r\n      <path d=\"M21 12a9 9 0 1 1-6.219-8.56\" />\r\n    </svg>\r\n  );\r\n};\r\n","interface NavigationIconProps {\r\n  className?: string\r\n  size?: number\r\n  color?: string\r\n}\r\n\r\nexport const NavigationIcon: React.FC<NavigationIconProps> = ({\r\n  className = \"\",\r\n  size = 24,\r\n  color = \"currentColor\",\r\n}) => {\r\n  return (\r\n    <svg\r\n      width={size}\r\n      height={size}\r\n      viewBox=\"0 0 24 24\"\r\n      fill=\"none\"\r\n      stroke={color}\r\n      strokeWidth=\"2\"\r\n      strokeLinecap=\"round\"\r\n      strokeLinejoin=\"round\"\r\n      className={className}\r\n    >\r\n      <polygon points=\"3,11 22,2 13,21 11,13 3,11\" />\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default NavigationIcon\r\n","import type React from \"react\";\r\nimport { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport { ApiNormalizer } from \"@/lib/api-normalizer\";\r\nimport type { DireccionSuggestion, DireccionType, Calle } from \"../types/direction.types\";\r\nimport { LoaderIcon } from \"@/assets/Loader\";\r\nimport NavigationIcon from \"@/assets/Navigation\";\r\n\r\ninterface AddressSearchProps {\r\n  maxSuggestions?: number;\r\n  onAddressSelect: (address: DireccionSuggestion) => void;\r\n  onAddressesRemove: (index: number) => void;\r\n  selectedAddresses: DireccionSuggestion[];\r\n  placeholder?: string;\r\n  debug?: boolean;\r\n  className?: string;\r\n  inputClassName?: string;\r\n  suggestionsClassName?: string;\r\n  suggestionItemClassName?: string;\r\n  selectedAddressesClassName?: string;\r\n  loadingClassName?: string;\r\n  suggestionsContainerClassName?: string;\r\n  selectedAddressesContainerClassName?: string;\r\n  selectedAddressItemClassName?: string;\r\n  removeButtonClassName?: string;\r\n  errorClassName?: string;\r\n  iconClassName?: string;\r\n  titleClassName?: string;\r\n  subtitleClassName?: string;\r\n  coordsClassName?: string;\r\n  smpClassName?: string;\r\n  serverTimeout?: number;\r\n}\r\n\r\nexport const AddressSearch: React.FC<AddressSearchProps> = ({\r\n  maxSuggestions = 10,\r\n  onAddressSelect,\r\n  onAddressesRemove,\r\n  placeholder = \"Buscar dirección o coordenadas...\",\r\n  debug = false,\r\n  className = \"\",\r\n  inputClassName = \"\",\r\n  selectedAddresses = [],\r\n  suggestionsClassName = \"\",\r\n  suggestionItemClassName = \"\",\r\n  selectedAddressesClassName = \"\",\r\n  loadingClassName = \"\",\r\n  suggestionsContainerClassName = \"\",\r\n  selectedAddressesContainerClassName = \"\",\r\n  selectedAddressItemClassName = \"\",\r\n  removeButtonClassName = \"\",\r\n  errorClassName = \"\",\r\n  iconClassName = \"\",\r\n  titleClassName = \"\",\r\n  subtitleClassName = \"\",\r\n  coordsClassName = \"\",\r\n  smpClassName = \"\",\r\n  serverTimeout = 5000,\r\n}) => {\r\n  const [searchText, setSearchText] = useState<string>(\"\");\r\n  const [suggestions, setSuggestions] = useState<DireccionSuggestion[]>([]);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [showSuggestions, setShowSuggestions] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const inputTimerRef = useRef<NodeJS.Timeout | null>(null);\r\n  const normalizadorRef = useRef<ApiNormalizer | null>(null);\r\n\r\n  // Initialize the ApiNormalizer on component mount\r\n  useEffect(() => {\r\n    normalizadorRef.current = new ApiNormalizer({\r\n      debug,\r\n      maxSuggestions,\r\n      serverTimeout,\r\n    });\r\n\r\n    return () => {\r\n      // Clean up any pending requests on unmount\r\n      if (inputTimerRef.current) {\r\n        clearTimeout(inputTimerRef.current);\r\n      }\r\n      if (normalizadorRef.current) {\r\n        normalizadorRef.current.abort();\r\n      }\r\n    };\r\n  }, [debug, maxSuggestions, serverTimeout]);\r\n\r\n  const convertToDireccionSuggestion = (\r\n    d: DireccionType | Calle\r\n  ): DireccionSuggestion => {\r\n    if (d.tipo === \"CALLE\") {\r\n      // It's a Calle type\r\n      return {\r\n        title: d.nombre,\r\n        subTitle: d.descripcion || \"CABA\",\r\n        type: \"CALLE\",\r\n        category: \"CALLE\",\r\n        suggesterName: \"Direcciones\",\r\n        data: {\r\n          nombre: d.nombre,\r\n          descripcion: d.descripcion || \"\",\r\n          tipo: \"CALLE\",\r\n          codigo: d.codigo,\r\n        },\r\n      };\r\n    } else {\r\n      // It's a DireccionType\r\n      return {\r\n        title: d.nombre,\r\n        subTitle: d.descripcion || \"CABA\",\r\n        type: d.tipoDireccion,\r\n        category: d.tipoDireccion,\r\n        suggesterName: \"Direcciones\",\r\n        data: {\r\n          nombre: d.nombre,\r\n          descripcion: d.descripcion || \"\",\r\n          tipo: d.tipo,\r\n          codigo: d.calle.codigo,\r\n          altura:\r\n            d.tipoDireccion === \"DIRECCION_CALLE_ALTURA\" ? d.altura : undefined,\r\n          calle: {\r\n            codigo: d.calle.codigo,\r\n          },\r\n          coordenadas: d.coordenadas,\r\n          smp: d.smp,\r\n        },\r\n      };\r\n    }\r\n  };\r\n\r\n  const getSuggestions = useCallback(\r\n    async (text: string) => {\r\n      if (debug) {\r\n        console.debug(`getSuggestions('${text}')`);\r\n      }\r\n\r\n      if (!normalizadorRef.current || !text || text.length < 3) {\r\n        setSuggestions([]);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        const direcciones = await normalizadorRef.current.normalizar(\r\n          text,\r\n          maxSuggestions\r\n        );\r\n        const results = direcciones.map(convertToDireccionSuggestion);\r\n\r\n        setSuggestions(results);\r\n\r\n        // Automatically show suggestions when we have results or when loading\r\n        setShowSuggestions(true);\r\n\r\n        if (results.length === 0) {\r\n          setError(\"No se encontraron resultados\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error getting suggestions:\", error);\r\n        setSuggestions([]);\r\n        setError(\"Error al buscar direcciones\");\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    },\r\n    [debug, maxSuggestions]\r\n  );\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value;\r\n    setSearchText(value);\r\n    setError(null);\r\n\r\n    // Clear previous timer\r\n    if (inputTimerRef.current) {\r\n      clearTimeout(inputTimerRef.current);\r\n    }\r\n\r\n    // Abort any ongoing request\r\n    if (normalizadorRef.current) {\r\n      normalizadorRef.current.abort();\r\n    }\r\n\r\n    // Set a new timer to delay the search\r\n    if (value.length >= 3) {\r\n      // Show suggestions container immediately when typing (even before results arrive)\r\n      setShowSuggestions(true);\r\n      setIsLoading(true);\r\n\r\n      inputTimerRef.current = setTimeout(() => {\r\n        getSuggestions(value);\r\n      }, 300);\r\n    } else {\r\n      setSuggestions([]);\r\n      setShowSuggestions(false);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSelectSuggestion = (suggestion: DireccionSuggestion) => {\r\n    // Add to selected addresses if not already there\r\n    if (\r\n      !selectedAddresses.some(\r\n        (addr) => addr.data.nombre === suggestion.data.nombre\r\n      )\r\n    ) {\r\n      onAddressSelect(suggestion);\r\n    }\r\n\r\n    // Clear input and suggestions\r\n    setSearchText(\"\");\r\n    setSuggestions([]);\r\n    setShowSuggestions(false);\r\n  };\r\n\r\n  const handleRemoveAddress = (index: number) => {\r\n    onAddressesRemove(index);\r\n  };\r\n\r\n  const handleInputFocus = () => {\r\n    if (searchText.length >= 3) {\r\n      setShowSuggestions(true);\r\n    }\r\n  };\r\n\r\n  const handleInputBlur = () => {\r\n    // Delay hiding suggestions to allow clicking on them\r\n    setTimeout(() => {\r\n      setShowSuggestions(false);\r\n    }, 200);\r\n  };\r\n\r\n  return (\r\n    <div className={`address-search-container ${className}`}>\r\n      <div className=\"relative\">\r\n        <input\r\n          type=\"text\"\r\n          value={searchText}\r\n          onChange={handleInputChange}\r\n          onFocus={handleInputFocus}\r\n          onBlur={handleInputBlur}\r\n          placeholder={placeholder}\r\n          className={`w-full p-2 border rounded ${inputClassName}`}\r\n        />\r\n        {isLoading && (\r\n          <div\r\n            className={`absolute right-2 top-1/2 transform -translate-y-1/2 ${loadingClassName}`}\r\n          >\r\n            <LoaderIcon className=\"h-4 w-4 text-gray-500 animate-spin\" />\r\n          </div>\r\n        )}\r\n\r\n        {(showSuggestions || isLoading) && (\r\n          <ul\r\n            className={`absolute z-10 w-full mt-1 bg-white border rounded shadow-lg max-h-60 overflow-auto ${suggestionsContainerClassName}`}\r\n          >\r\n            {isLoading ? (\r\n              <li\r\n                className={`p-4 text-center text-gray-500 ${suggestionsClassName}`}\r\n              >\r\n                <LoaderIcon className=\"h-5 w-5 mx-auto animate-spin mb-2\" />\r\n                <span>Buscando direcciones...</span>\r\n              </li>\r\n            ) : suggestions.length > 0 ? (\r\n              suggestions.map((suggestion, index) => (\r\n                <li\r\n                  key={`${suggestion.data.nombre}-${index}`}\r\n                  className={`p-2 cursor-pointer hover:bg-gray-100 ${suggestionItemClassName}`}\r\n                  onClick={() => handleSelectSuggestion(suggestion)}\r\n                >\r\n                  <div className=\"flex items-start gap-2\">\r\n                    <div className=\"mt-1\">\r\n                      <NavigationIcon\r\n                        className={`h-4 w-4 text-blue-500 ${iconClassName}`}\r\n                      />\r\n                    </div>\r\n                    <div className=\"flex-1\">\r\n                      <div className={`font-medium ${titleClassName}`}>\r\n                        {suggestion.title}\r\n                      </div>\r\n                      <div\r\n                        className={`text-sm text-gray-500 ${subtitleClassName}`}\r\n                      >\r\n                        {suggestion.subTitle}\r\n                      </div>\r\n                      {suggestion.data.coordenadas && (\r\n                        <div\r\n                          className={`text-xs text-gray-400 ${coordsClassName}`}\r\n                        >\r\n                          Coord: {suggestion.data.coordenadas.x.toFixed(6)},{\" \"}\r\n                          {suggestion.data.coordenadas.y.toFixed(6)}\r\n                        </div>\r\n                      )}\r\n                      {suggestion.data.smp && (\r\n                        <div\r\n                          className={`text-xs text-gray-400 ${smpClassName}`}\r\n                        >\r\n                          SMP: {suggestion.data.smp}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </li>\r\n              ))\r\n            ) : searchText.length >= 3 ? (\r\n              <li className={`p-4 text-center text-red-500 ${errorClassName}`}>\r\n                {error || \"No se encontraron resultados\"}\r\n              </li>\r\n            ) : (\r\n              <li\r\n                className={`p-4 text-center text-gray-500 ${suggestionsClassName}`}\r\n              >\r\n                Ingrese al menos 3 caracteres para buscar\r\n              </li>\r\n            )}\r\n          </ul>\r\n        )}\r\n\r\n        {error && !isLoading && !showSuggestions && (\r\n          <div className={`mt-1 text-sm text-red-500 ${errorClassName}`}>\r\n            {error}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {selectedAddresses.length > 0 && (\r\n        <div\r\n          className={`mt-4 ${selectedAddressesClassName} ${selectedAddressesContainerClassName}`}\r\n        >\r\n          <h3 className=\"text-sm font-medium mb-2\">\r\n            Direcciones seleccionadas:\r\n          </h3>\r\n          <ul className=\"space-y-2\">\r\n            {selectedAddresses.map((address, index) => (\r\n              <li\r\n                key={`selected-${index}`}\r\n                className={`flex justify-between items-center p-2 bg-gray-50 rounded ${selectedAddressItemClassName}`}\r\n              >\r\n                <div className=\"flex items-start gap-2\">\r\n                  <div className=\"mt-1\">\r\n                    <NavigationIcon\r\n                      className={`h-4 w-4 text-blue-500 ${iconClassName}`}\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <div className={`font-medium ${titleClassName}`}>\r\n                      {address.title}\r\n                    </div>\r\n                    <div\r\n                      className={`text-sm text-gray-500 ${subtitleClassName}`}\r\n                    >\r\n                      {address.subTitle}\r\n                    </div>\r\n                    {address.data.coordenadas && (\r\n                      <div\r\n                        className={`text-xs text-gray-400 ${coordsClassName}`}\r\n                      >\r\n                        Coord: {address.data.coordenadas.x.toFixed(6)},{\" \"}\r\n                        {address.data.coordenadas.y.toFixed(6)}\r\n                      </div>\r\n                    )}\r\n                    {address.data.smp && (\r\n                      <div className={`text-xs text-gray-400 ${smpClassName}`}>\r\n                        SMP: {address.data.smp}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => handleRemoveAddress(index)}\r\n                  className={`text-red-500 hover:text-red-700 ${removeButtonClassName}`}\r\n                >\r\n                  ×\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import type React from \"react\";\r\nimport { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport { ApiNormalizer } from \"@/lib/api-normalizer\";\r\nimport type {\r\n  DireccionSuggestion,\r\n  DireccionType,\r\n  Calle,\r\n} from \"../types/direction.types\";\r\n\r\ninterface AddressSearchOptions {\r\n  maxSuggestions?: number;\r\n  debug?: boolean;\r\n  serverTimeout?: number;\r\n}\r\n\r\ninterface UseAddressSearchReturn {\r\n  searchText: string;\r\n  setSearchText: (text: string) => void;\r\n  suggestions: DireccionSuggestion[];\r\n  selectedAddresses: DireccionSuggestion[];\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  showSuggestions: boolean;\r\n  setShowSuggestions: (show: boolean) => void;\r\n  handleInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  handleSelectSuggestion: (suggestion: DireccionSuggestion) => void;\r\n  handleRemoveAddress: (index: number) => void;\r\n  handleInputFocus: () => void;\r\n  handleInputBlur: () => void;\r\n}\r\n\r\nexport function useAddressSearch(\r\n  options: AddressSearchOptions = {}\r\n): UseAddressSearchReturn {\r\n  const { maxSuggestions = 10, debug = false, serverTimeout = 5000 } = options;\r\n\r\n  const [searchText, setSearchText] = useState<string>(\"\");\r\n  const [suggestions, setSuggestions] = useState<DireccionSuggestion[]>([]);\r\n  const [selectedAddresses, setSelectedAddresses] = useState<\r\n    DireccionSuggestion[]\r\n  >([]);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [showSuggestions, setShowSuggestions] = useState<boolean>(false);\r\n  const inputTimerRef = useRef<NodeJS.Timeout | null>(null);\r\n  const normalizadorRef = useRef<ApiNormalizer | null>(null);\r\n\r\n  // Initialize the ApiNormalizer on component mount\r\n  useEffect(() => {\r\n    normalizadorRef.current = new ApiNormalizer({\r\n      debug,\r\n      maxSuggestions,\r\n      serverTimeout,\r\n    });\r\n\r\n    return () => {\r\n      // Clean up any pending requests on unmount\r\n      if (inputTimerRef.current) {\r\n        clearTimeout(inputTimerRef.current);\r\n      }\r\n      if (normalizadorRef.current) {\r\n        normalizadorRef.current.abort();\r\n      }\r\n    };\r\n  }, [debug, maxSuggestions, serverTimeout]);\r\n\r\n  const convertToDireccionSuggestion = (\r\n    d: DireccionType | Calle\r\n  ): DireccionSuggestion => {\r\n    if (d.tipo === \"CALLE\") {\r\n      // It's a Calle type\r\n      return {\r\n        title: d.nombre,\r\n        subTitle: d.descripcion || \"CABA\",\r\n        type: \"CALLE\",\r\n        category: \"CALLE\",\r\n        suggesterName: \"Direcciones\",\r\n        data: {\r\n          nombre: d.nombre,\r\n          descripcion: d.descripcion || \"\",\r\n          tipo: \"CALLE\",\r\n          codigo: d.codigo,\r\n        },\r\n      };\r\n    } else {\r\n      // It's a DireccionType\r\n      return {\r\n        title: d.nombre,\r\n        subTitle: d.descripcion || \"CABA\",\r\n        type: d.tipoDireccion,\r\n        category: d.tipoDireccion,\r\n        suggesterName: \"Direcciones\",\r\n        data: {\r\n          nombre: d.nombre,\r\n          descripcion: d.descripcion || \"\",\r\n          tipo: d.tipo,\r\n          codigo: d.calle.codigo,\r\n          altura:\r\n            d.tipoDireccion === \"DIRECCION_CALLE_ALTURA\" ? d.altura : undefined,\r\n          calle: {\r\n            codigo: d.calle.codigo,\r\n          },\r\n          coordenadas: d.coordenadas,\r\n          smp: d.smp,\r\n        },\r\n      };\r\n    }\r\n  };\r\n\r\n  const fetchSuggestions = useCallback(\r\n    async (text: string) => {\r\n      if (debug) {\r\n        console.log(`fetchSuggestions('${text}')`);\r\n      }\r\n\r\n      if (!normalizadorRef.current || !text || text.length < 3) {\r\n        setSuggestions([]);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        const direcciones = await normalizadorRef.current.normalizar(\r\n          text,\r\n          maxSuggestions\r\n        );\r\n        const results = direcciones.map(convertToDireccionSuggestion);\r\n\r\n        setSuggestions(results);\r\n\r\n        if (results.length === 0) {\r\n          setError(\"No se encontraron resultados\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error getting suggestions:\", error);\r\n        setSuggestions([]);\r\n        setError(\"Error al buscar direcciones\");\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    },\r\n    [debug, maxSuggestions]\r\n  );\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value;\r\n    setSearchText(value);\r\n    setError(null);\r\n\r\n    // Clear previous timer\r\n    if (inputTimerRef.current) {\r\n      clearTimeout(inputTimerRef.current);\r\n    }\r\n\r\n    // Abort any ongoing request\r\n    if (normalizadorRef.current) {\r\n      normalizadorRef.current.abort();\r\n    }\r\n\r\n    // Set a new timer to delay the search\r\n    if (value.length >= 3) {\r\n      inputTimerRef.current = setTimeout(() => {\r\n        fetchSuggestions(value);\r\n      }, 300);\r\n    } else {\r\n      setSuggestions([]);\r\n    }\r\n  };\r\n\r\n  const handleSelectSuggestion = (suggestion: DireccionSuggestion) => {\r\n    // Add to selected addresses if not already there\r\n    if (\r\n      !selectedAddresses.some(\r\n        (addr) => addr.data.nombre === suggestion.data.nombre\r\n      )\r\n    ) {\r\n      setSelectedAddresses((prev) => [...prev, suggestion]);\r\n    }\r\n\r\n    // Clear input and suggestions\r\n    setSearchText(\"\");\r\n    setSuggestions([]);\r\n    setShowSuggestions(false);\r\n  };\r\n\r\n  const handleRemoveAddress = (index: number) => {\r\n    setSelectedAddresses((prev) => {\r\n      const newAddresses = [...prev];\r\n      newAddresses.splice(index, 1);\r\n      return newAddresses;\r\n    });\r\n  };\r\n\r\n  const handleInputFocus = () => {\r\n    if (searchText.length >= 3 && suggestions.length > 0) {\r\n      setShowSuggestions(true);\r\n    }\r\n  };\r\n\r\n  const handleInputBlur = () => {\r\n    // Delay hiding suggestions to allow clicking on them\r\n    setTimeout(() => {\r\n      setShowSuggestions(false);\r\n    }, 200);\r\n  };\r\n\r\n  return {\r\n    searchText,\r\n    setSearchText,\r\n    suggestions,\r\n    selectedAddresses,\r\n    isLoading,\r\n    error,\r\n    showSuggestions,\r\n    setShowSuggestions,\r\n    handleInputChange,\r\n    handleSelectSuggestion,\r\n    handleRemoveAddress,\r\n    handleInputFocus,\r\n    handleInputBlur,\r\n  };\r\n}\r\n"],"names":["USIG_WEBSERVICE_URL","ApiNormalizer","debug","maxSuggestions","lastRequest","serverTimeout","constructor","options","this","abort","console","normalizar","str","maxOptions","AbortController","results","addresses","searchAddresses","coordsMatch","parseCoordinates","coordResults","reverseGeocode","x","y","slice","error","axios","isCancel","url","encodeURIComponent","config","headers","Accept","signal","timeout","response","get","data","direccionesNormalizadas","length","processDireccionesNormalizadas","calles","processCalles","log","cleanStr","trim","replace","patterns","pattern","match","Number","parseFloat","direccion","calle","codigo","cod_calle","nombre","descripcion","tipo","alturas","inicio","fin","altura","parseInt","tipoDireccion","toFixed","coordenadas","srid","direcciones","Promise","resolve","promises","map","async","dir","split","includes","calleNames","c","calleCruce","undefined","smp","getSMP","all","then","filter","Boolean","inicial","final","partido","localidad","getCoordinates","lugar","coords","String","inicializado","LoaderIcon","className","size","color","_jsx","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","NavigationIcon","points","onAddressSelect","onAddressesRemove","placeholder","inputClassName","selectedAddresses","suggestionsClassName","suggestionItemClassName","selectedAddressesClassName","loadingClassName","suggestionsContainerClassName","selectedAddressesContainerClassName","selectedAddressItemClassName","removeButtonClassName","errorClassName","iconClassName","titleClassName","subtitleClassName","coordsClassName","smpClassName","searchText","setSearchText","useState","suggestions","setSuggestions","isLoading","setIsLoading","showSuggestions","setShowSuggestions","setError","inputTimerRef","useRef","normalizadorRef","useEffect","current","clearTimeout","convertToDireccionSuggestion","title","subTitle","type","category","suggesterName","getSuggestions","useCallback","text","_jsxs","children","jsxs","value","onChange","e","target","setTimeout","onFocus","onBlur","jsx","suggestion","index","onClick","some","addr","handleSelectSuggestion","address","handleRemoveAddress","setSelectedAddresses","fetchSuggestions","handleInputChange","prev","newAddresses","splice","handleInputFocus","handleInputBlur"],"mappings":"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"}