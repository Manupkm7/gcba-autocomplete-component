{"version":3,"file":"index.esm.js","sources":["../src/lib/api-normalizer.ts","../src/assets/Loader.tsx","../src/assets/Navigation.tsx","../src/components/search.tsx","../src/hooks/useAddressSearch.tsx"],"sourcesContent":["import type {\r\n  Calle,\r\n  DireccionType,\r\n  DireccionCalleAltura,\r\n  DireccionCalleYCalle,\r\n  Coordinates,\r\n} from \"../types/direction.types\";\r\nimport axios, { type AxiosRequestConfig } from \"axios\";\r\n\r\n// API endpoints\r\nconst USIG_WEBSERVICE_URL = \"https://servicios.usig.buenosaires.gob.ar\";\r\nconst CATASTRO_WEBSERVICE_URL = \"https://epok.buenosaires.gob.ar/catastro\";\r\n\r\n// Response types\r\ninterface NormalizadorResponse {\r\n  direccionesNormalizadas?: Array<{\r\n    altura_par: string | undefined;\r\n    altura_impar: string | undefined;\r\n    calle_alturas: { inicio: number; fin: number }[] | undefined;\r\n    direccion?: string;\r\n    tipo?: string;\r\n    nombre?: string;\r\n    altura?: string;\r\n    cod_calle?: string;\r\n    cod_partido?: string;\r\n    partido?: string;\r\n    cod_localidad?: string;\r\n    nombre_partido?: string;\r\n    nombre_localidad?: string;\r\n    localidad?: string;\r\n    comuna?: string;\r\n    barrio?: string;\r\n    coordenadas?: {\r\n      x: string;\r\n      y: string;\r\n      srid: number;\r\n    };\r\n  }>;\r\n  calles?: Array<{\r\n    nombre: string;\r\n    tipo?: string;\r\n    cod_calle: string;\r\n    altura?: {\r\n      inicial: number;\r\n      final: number;\r\n    };\r\n    partido?: string;\r\n    localidad?: string;\r\n  }>;\r\n  error?: string;\r\n}\r\n\r\ninterface CatastroResponse {\r\n  smp?: string;\r\n  error?: string;\r\n}\r\n\r\ninterface ReverseGeocodingResponse {\r\n  direccion?: string;\r\n  tipo?: string;\r\n  nombre?: string;\r\n  altura?: string;\r\n  cod_calle?: string;\r\n  cod_partido?: string;\r\n  partido?: string;\r\n  cod_localidad?: string;\r\n  localidad?: string;\r\n  nombre_barrio?: string;\r\n  nombre_comuna?: string;\r\n  nombre_partido?: string;\r\n  calle_alturas?: {\r\n    inicio: number;\r\n    fin: number;\r\n  }[];\r\n  altura_par?: string;\r\n  altura_impar?: string;\r\n  nombre_localidad?: string;\r\n  barrio?: string;\r\n  coordenadas?: {\r\n    x: string;\r\n    y: string;\r\n    srid: number;\r\n  };\r\n  error?: string;\r\n}\r\n\r\nexport class ApiNormalizer {\r\n  private debug: boolean;\r\n  private maxSuggestions: number;\r\n  private lastRequest: AbortController | null;\r\n  private serverTimeout: number;\r\n\r\n  constructor(\r\n    options: {\r\n      debug?: boolean;\r\n      maxSuggestions?: number;\r\n      serverTimeout?: number;\r\n    } = {}\r\n  ) {\r\n    this.debug = options.debug || false;\r\n    this.maxSuggestions = options.maxSuggestions || 10;\r\n    this.serverTimeout = options.serverTimeout || 5000;\r\n    this.lastRequest = null;\r\n  }\r\n\r\n  /**\r\n   * Abort any ongoing request\r\n   */\r\n  abort(): void {\r\n    if (this.lastRequest) {\r\n      this.lastRequest.abort();\r\n      this.lastRequest = null;\r\n      if (this.debug) console.debug(\"Request aborted\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Normalizes an address string and returns matching addresses\r\n   */\r\n  async normalizar(\r\n    str: string,\r\n    maxOptions: number = this.maxSuggestions\r\n  ): Promise<Array<DireccionType | Calle>> {\r\n    if (this.debug) {\r\n      console.debug(`ApiNormalizer.normalizar('${str}', ${maxOptions})`);\r\n    }\r\n\r\n    // Abort previous request if exists\r\n    this.abort();\r\n\r\n    // Create new AbortController for this request\r\n    this.lastRequest = new AbortController();\r\n\r\n    try {\r\n      let results: Array<DireccionType | Calle> = [];\r\n\r\n      // 1. First search for addresses\r\n      const addresses = await this.searchAddresses(str, maxOptions);\r\n      results = [...results, ...addresses];\r\n\r\n      // 2. Check if input is coordinates and search if it is\r\n      const coordsMatch = this.parseCoordinates(str);\r\n      if (coordsMatch) {\r\n        const coordResults = await this.reverseGeocode(\r\n          coordsMatch.x,\r\n          coordsMatch.y\r\n        );\r\n        results = [...results, ...coordResults];\r\n      }\r\n\r\n      return results.slice(0, maxOptions);\r\n    } catch (error) {\r\n      if (axios.isCancel(error)) {\r\n        if (this.debug) console.debug(\"Request was cancelled\");\r\n      } else {\r\n        console.error(\"Error normalizing address:\", error);\r\n      }\r\n      return [];\r\n    } finally {\r\n      this.lastRequest = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Search for addresses using the USIG API\r\n   */\r\n  private async searchAddresses(\r\n    str: string,\r\n    maxOptions: number\r\n  ): Promise<Array<DireccionType | Calle>> {\r\n    try {\r\n      const url = `${USIG_WEBSERVICE_URL}/normalizar/?direccion=${encodeURIComponent(\r\n        str\r\n      )}&geocodificar=true&max=${maxOptions}`;\r\n\r\n      const config: AxiosRequestConfig = {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n        },\r\n        signal: this.lastRequest?.signal,\r\n        timeout: this.serverTimeout,\r\n      };\r\n\r\n      const response = await axios.get<NormalizadorResponse>(url, config);\r\n\r\n      if (response.data.error) {\r\n        if (this.debug) console.error(\"API error:\", response.data.error);\r\n        return [];\r\n      }\r\n\r\n      // Process direccionesNormalizadas (addresses)\r\n      if (\r\n        response.data.direccionesNormalizadas &&\r\n        response.data.direccionesNormalizadas.length > 0\r\n      ) {\r\n        const direccionesCABA = response.data.direccionesNormalizadas.filter(\r\n          (dir) => {\r\n            const cod = dir.cod_partido?.toLowerCase();\r\n            const nombrePartido = dir.nombre_partido?.toLowerCase();\r\n            const nombreLocalidad = dir.nombre_localidad?.toLowerCase();\r\n\r\n            return (\r\n              cod === \"caba\" ||\r\n              nombrePartido === \"caba\" ||\r\n              nombreLocalidad === \"caba\"\r\n            );\r\n          }\r\n        );\r\n        const direccionesEnriquecidas = await Promise.all(\r\n          direccionesCABA.map(async (dir) => {\r\n            const coordenadas = await this.obtenerCoordenadas(\r\n              dir.cod_calle ?? \"\",\r\n              Number(dir.altura ?? 0)\r\n            );\r\n            if (coordenadas) {\r\n              const { barrio, comuna } = await this.obtenerBarrioYComuna(\r\n                coordenadas.y,\r\n                coordenadas.x\r\n              );\r\n\r\n              return {\r\n                ...dir,\r\n                altura_par: coordenadas.altura_par,\r\n                altura_impar: coordenadas.altura_impar,\r\n                calle_alturas: coordenadas.calle_alturas,\r\n                coordenadas: {\r\n                  x: coordenadas.x.toString(),\r\n                  y: coordenadas.y.toString(),\r\n                  srid: 4326,\r\n                },\r\n                barrio,\r\n                comuna,\r\n              };\r\n            } else {\r\n              return dir; // Devolvés la dirección sin coordenadas ni barrio/comuna\r\n            }\r\n          })\r\n        );\r\n        return this.processDireccionesNormalizadas(direccionesEnriquecidas);\r\n      }\r\n\r\n      // Process calles (streets)\r\n      if (response.data.calles && response.data.calles.length > 0) {\r\n        return this.processCalles(response.data.calles);\r\n      }\r\n\r\n      return [];\r\n    } catch (error) {\r\n      if (axios.isCancel(error)) {\r\n        if (this.debug) console.debug(\"Address search request was cancelled\");\r\n      } else {\r\n        console.error(\"Error searching addresses:\", error);\r\n      }\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private async obtenerBarrioYComuna(\r\n    lat: number,\r\n    lon: number\r\n  ): Promise<{ barrio?: string; comuna?: string }> {\r\n    try {\r\n      const url = `https://ws.usig.buenosaires.gob.ar/datos_utiles/?x=${lon}&y=${lat}`;\r\n      const response = await axios.get(url);\r\n      const capas = response.data;\r\n      const barrio = capas?.barrio;\r\n      const comuna = capas?.comuna;\r\n\r\n      return { barrio, comuna };\r\n    } catch (error) {\r\n      console.error(\"Error al obtener barrio y comuna:\", error);\r\n      return {};\r\n    }\r\n  }\r\n\r\n  private async obtenerCoordenadas(\r\n    calle: string,\r\n    numero: number\r\n  ): Promise<Coordinates | null> {\r\n    try {\r\n      const geocodingUrl = `https://ws.usig.buenosaires.gob.ar/geocoder/2.2/geocoding?cod_calle=${encodeURIComponent(\r\n        calle\r\n      )}&altura=${numero}`;\r\n\r\n      const geocodingResponse = await axios.get<string>(geocodingUrl);\r\n      const text = geocodingResponse.data;\r\n\r\n      // Elimina los paréntesis del string\r\n      const jsonString = text.replace(/^\\(|\\)$/g, \"\");\r\n      const data = JSON.parse(jsonString);\r\n\r\n      const { x, y } = data;\r\n      const getAltura = `https://ws.usig.buenosaires.gob.ar/geocoder/2.2/reversegeocoding?x=${x}&y=${y}`;\r\n      const conversionUrl = `https://ws.usig.buenosaires.gob.ar/rest/convertir_coordenadas/?x=${x}&y=${y}&output=lonlat`;\r\n\r\n      const conversionResponse = await axios.get(conversionUrl);\r\n      const alturaResponse = await axios.get(getAltura);\r\n      const alturaJsonString = alturaResponse.data.replace(/^\\(|\\)$/g, \"\");\r\n\r\n      const { calle_alturas, altura_impar, altura_par } =\r\n        JSON.parse(alturaJsonString);\r\n\r\n      const { x: lon, y: lat } = conversionResponse.data.resultado;\r\n\r\n      return { y: lat, x: lon, altura_par, altura_impar, calle_alturas };\r\n    } catch (error) {\r\n      console.error(\"Error al obtener coordenadas:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse coordinates from input string\r\n   * Supports formats like \"lat,lng\", \"x,y\", \"-34.603722,-58.381592\"\r\n   */\r\n  private parseCoordinates(str: string): Coordinates | null {\r\n    // Remove any spaces\r\n    const cleanStr = str.trim().replace(/\\s+/g, \"\");\r\n\r\n    // Match common coordinate formats\r\n    const patterns = [\r\n      // Lat,Lng format (e.g., -34.603722,-58.381592)\r\n      /^(-?\\d+\\.?\\d*),(-?\\d+\\.?\\d*)$/,\r\n      // X,Y format with optional text (e.g., \"x: 123.45, y: 678.90\")\r\n      /x:?(-?\\d+\\.?\\d*)[,\\s]+y:?(-?\\d+\\.?\\d*)/i,\r\n      // Y,X format with optional text (e.g., \"y: 678.90, x: 123.45\")\r\n      /y:?(-?\\d+\\.?\\d*)[,\\s]+x:?(-?\\d+\\.?\\d*)/i,\r\n    ];\r\n\r\n    for (const pattern of patterns) {\r\n      const match = cleanStr.match(pattern);\r\n      if (match) {\r\n        if (pattern === patterns[0]) {\r\n          // Lat,Lng format\r\n          return {\r\n            y: Number.parseFloat(match[1]), // Latitude is Y\r\n            x: Number.parseFloat(match[2]), // Longitude is X\r\n          };\r\n        } else if (pattern === patterns[1]) {\r\n          // X,Y format\r\n          return {\r\n            x: Number.parseFloat(match[1]),\r\n            y: Number.parseFloat(match[2]),\r\n          };\r\n        } else if (pattern === patterns[2]) {\r\n          // Y,X format\r\n          return {\r\n            y: Number.parseFloat(match[1]),\r\n            x: Number.parseFloat(match[2]),\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Reverse geocode coordinates to get an address\r\n   */\r\n  private async reverseGeocode(x: number, y: number): Promise<DireccionType[]> {\r\n    if (this.debug) {\r\n      console.debug(`ApiNormalizer.reverseGeocode(${x}, ${y})`);\r\n    }\r\n\r\n    // Abort previous request if exists\r\n    this.abort();\r\n\r\n    // Create new AbortController for this request\r\n    this.lastRequest = new AbortController();\r\n\r\n    try {\r\n      const url = `${USIG_WEBSERVICE_URL}/reverseGeocoderLugares/?x=${x}&y=${y}&srid=4326`;\r\n\r\n      const config: AxiosRequestConfig = {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n        },\r\n        signal: this.lastRequest.signal,\r\n        timeout: this.serverTimeout,\r\n      };\r\n\r\n      const response = await axios.get<ReverseGeocodingResponse>(url, config);\r\n\r\n      if (response.data.error) {\r\n        if (this.debug)\r\n          console.error(\"Reverse geocoding API error:\", response.data.error);\r\n        return [];\r\n      }\r\n\r\n      if (!response.data.direccion) {\r\n        return [];\r\n      }\r\n\r\n      // Create a base calle object\r\n      const calle: Calle = {\r\n        codigo: response.data.cod_calle || \"coord\",\r\n        nombre: response.data.nombre || response.data.direccion || \"Coordenada\",\r\n        descripcion: response.data.direccion || \"Coordenada\",\r\n        tipo: \"CALLE\",\r\n        alturas: [\r\n          {\r\n            inicio: 1,\r\n            fin: 10000, // Default range\r\n          },\r\n        ],\r\n      };\r\n\r\n      // Parse altura if available\r\n      let altura = 0;\r\n      if (response.data.altura) {\r\n        altura = Number.parseInt(response.data.altura, 10);\r\n      }\r\n\r\n      // Create a DireccionCalleAltura object\r\n      const direccion: DireccionCalleAltura = {\r\n        calle,\r\n        altura: altura || 1, // Default to 1 if no number found\r\n        tipoDireccion: \"DIRECCION_CALLE_ALTURA\",\r\n        tipo: \"DIRECCION\",\r\n        nombre:\r\n          response.data.direccion ||\r\n          `Coordenada (${x.toFixed(6)}, ${y.toFixed(6)})`,\r\n        descripcion: `Coordenada (${x.toFixed(6)}, ${y.toFixed(6)})`,\r\n        coordenadas: {\r\n          x,\r\n          y,\r\n          srid: response.data.coordenadas?.srid || 4326,\r\n        },\r\n        barrio: response.data.nombre_barrio,\r\n        altura_par: response.data.altura_par,\r\n        altura_impar: response.data.altura_impar,\r\n        calle_alturas: response.data.calle_alturas,\r\n        comuna: response.data.nombre_comuna,\r\n      };\r\n\r\n      return [direccion];\r\n    } catch (error) {\r\n      if (axios.isCancel(error)) {\r\n        if (this.debug)\r\n          console.debug(\"Reverse geocoding request was cancelled\");\r\n      } else {\r\n        console.error(\"Error in reverse geocoding:\", error);\r\n      }\r\n      return [];\r\n    } finally {\r\n      this.lastRequest = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process normalized addresses from API response\r\n   */\r\n  private processDireccionesNormalizadas(\r\n    direcciones: NormalizadorResponse[\"direccionesNormalizadas\"]\r\n  ): Promise<DireccionType[]> {\r\n    if (!direcciones) return Promise.resolve([]);\r\n\r\n    const promises = direcciones.map(async (dir) => {\r\n      // Skip invalid addresses\r\n      if (!dir.direccion || !dir.cod_calle) return null;\r\n\r\n      // Create a base calle object\r\n      const calle: Calle = {\r\n        codigo: dir.cod_calle,\r\n        nombre: dir.nombre || dir.direccion.split(\" \")[0],\r\n        descripcion: dir.direccion,\r\n        tipo: \"CALLE\",\r\n        alturas: [\r\n          {\r\n            inicio: 1,\r\n            fin: 10000, // Default range\r\n          },\r\n        ],\r\n      };\r\n\r\n      // Determine if it's a street intersection or street with number\r\n      const isIntersection = dir.direccion.includes(\" y \");\r\n      let direccion: DireccionType;\r\n\r\n      if (isIntersection) {\r\n        // It's a street intersection\r\n        const calleNames = dir.direccion.split(\" y \").map((c) => c.trim());\r\n\r\n        // We need to create a second calle object for the intersection\r\n        // In a real app, you might want to make another API call to get details\r\n        // For now, we'll create a mock second street\r\n        const calleCruce: Calle = {\r\n          codigo: `${dir.cod_calle}_cruce`,\r\n          nombre: calleNames[1] || \"Calle cruce\",\r\n          descripcion: calleNames[1] || \"Calle cruce\",\r\n          tipo: \"CALLE\",\r\n          alturas: [\r\n            {\r\n              inicio: 1,\r\n              fin: 10000,\r\n            },\r\n          ],\r\n        };\r\n\r\n        direccion = {\r\n          calle,\r\n          calleCruce,\r\n          tipoDireccion: \"DIRECCION_CALLE_Y_CALLE\",\r\n          tipo: \"DIRECCION\",\r\n          nombre: dir.direccion,\r\n          descripcion: dir.direccion,\r\n          coordenadas: dir.coordenadas\r\n            ? {\r\n                x: Number.parseFloat(dir.coordenadas.x),\r\n                y: Number.parseFloat(dir.coordenadas.y),\r\n                srid: dir.coordenadas.srid,\r\n              }\r\n            : undefined,\r\n          barrio: dir.barrio,\r\n          comuna: dir.comuna,\r\n          altura_par: dir.altura_par,\r\n          altura_impar: dir.altura_impar,\r\n          calle_alturas: dir.calle_alturas,\r\n        } as DireccionCalleYCalle;\r\n      } else {\r\n        // It's a street with number\r\n        const altura = dir.altura ? Number.parseInt(dir.altura, 10) : 0;\r\n\r\n        direccion = {\r\n          calle,\r\n          altura,\r\n          tipoDireccion: \"DIRECCION_CALLE_ALTURA\",\r\n          tipo: \"DIRECCION\",\r\n          nombre: dir.direccion,\r\n          descripcion: dir.direccion,\r\n          coordenadas: dir.coordenadas\r\n            ? {\r\n                x: Number.parseFloat(dir.coordenadas.x),\r\n                y: Number.parseFloat(dir.coordenadas.y),\r\n                srid: dir.coordenadas.srid,\r\n              }\r\n            : undefined,\r\n          barrio: dir.barrio,\r\n          comuna: dir.comuna,\r\n          altura_par: dir.altura_par,\r\n          altura_impar: dir.altura_impar,\r\n          calle_alturas: dir.calle_alturas,\r\n        } as DireccionCalleAltura;\r\n\r\n        // Get SMP if it's a street with number\r\n        if (altura > 0) {\r\n          try {\r\n            const smp = await this.getSMP({\r\n              nombre: dir.direccion,\r\n              descripcion: dir.direccion || \"\",\r\n              tipo: \"DIRECCION\",\r\n              codigo: dir.cod_calle,\r\n              altura: dir.altura,\r\n              altura_par: dir.altura_par,\r\n              altura_impar: dir.altura_impar,\r\n              calle_alturas: dir.calle_alturas,\r\n              calle: {\r\n                codigo: dir.cod_calle,\r\n              },\r\n            });\r\n            if (smp) {\r\n              direccion.smp = smp;\r\n            }\r\n          } catch (error) {\r\n            if (this.debug) console.error(\"Error getting SMP:\", error);\r\n          }\r\n        }\r\n      }\r\n\r\n      return direccion;\r\n    });\r\n\r\n    return Promise.all(promises).then(\r\n      (results) => results.filter(Boolean) as DireccionType[]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Process streets from API response\r\n   */\r\n  private processCalles(calles: NormalizadorResponse[\"calles\"]): Calle[] {\r\n    if (!calles) return [];\r\n\r\n    return calles.map((calle) => ({\r\n      codigo: calle.cod_calle,\r\n      nombre: calle.nombre,\r\n      descripcion: calle.tipo ? `${calle.tipo} ${calle.nombre}` : calle.nombre,\r\n      tipo: \"CALLE\",\r\n      alturas: [\r\n        {\r\n          inicio: calle.altura?.inicial || 1,\r\n          fin: calle.altura?.final || 10000,\r\n        },\r\n      ],\r\n      partido: calle.partido,\r\n      localidad: calle.localidad,\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Get coordinates for an address\r\n   */\r\n  async getCoordinates(lugar: {\r\n    nombre: string;\r\n    descripcion: string;\r\n  }): Promise<Coordinates | undefined> {\r\n    try {\r\n      // Abort previous request if exists\r\n      this.abort();\r\n\r\n      // Create new AbortController for this request\r\n      this.lastRequest = new AbortController();\r\n\r\n      const url = `${USIG_WEBSERVICE_URL}/normalizar/?direccion=${encodeURIComponent(\r\n        lugar.nombre\r\n      )},${encodeURIComponent(lugar.descripcion)}&geocodificar=true&srid=4326`;\r\n\r\n      const config: AxiosRequestConfig = {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n        },\r\n        signal: this.lastRequest.signal,\r\n        timeout: this.serverTimeout,\r\n      };\r\n\r\n      const response = await axios.get<NormalizadorResponse>(url, config);\r\n\r\n      const direccion = response.data.direccionesNormalizadas?.[0];\r\n\r\n      if (direccion?.coordenadas) {\r\n        const coords = direccion.coordenadas;\r\n        return {\r\n          x: Number.parseFloat(coords.x),\r\n          y: Number.parseFloat(coords.y),\r\n          srid: coords.srid,\r\n        };\r\n      }\r\n\r\n      return undefined;\r\n    } catch (error) {\r\n      if (axios.isCancel(error)) {\r\n        if (this.debug) console.debug(\"Request was aborted\");\r\n      } else {\r\n        console.error(\"Error fetching coordinates:\", error);\r\n      }\r\n      return undefined;\r\n    } finally {\r\n      this.lastRequest = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get SMP (cadastral identifier) for an address\r\n   */\r\n  async getSMP(lugar: {\r\n    nombre: string;\r\n    descripcion: string;\r\n    tipo: string;\r\n    codigo?: string;\r\n    altura?: string | number;\r\n    altura_par?: string | number;\r\n    altura_impar?: string | number;\r\n    calle_alturas?: { inicio: number; fin: number }[];\r\n    calle?: {\r\n      codigo: string;\r\n    };\r\n  }): Promise<string | undefined> {\r\n    try {\r\n      // Abort previous request if exists\r\n      this.abort();\r\n\r\n      // Create new AbortController for this request\r\n      this.lastRequest = new AbortController();\r\n\r\n      const codigo = lugar.codigo || lugar.calle?.codigo;\r\n      if (!codigo || !lugar.altura) {\r\n        return undefined;\r\n      }\r\n\r\n      const url = `${CATASTRO_WEBSERVICE_URL}/parcela/?codigo_calle=${encodeURIComponent(\r\n        codigo\r\n      )}&altura=${encodeURIComponent(\r\n        String(lugar.altura)\r\n      )}&geocodificar=true&srid=4326`;\r\n\r\n      const config: AxiosRequestConfig = {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n        },\r\n        signal: this.lastRequest.signal,\r\n        timeout: this.serverTimeout,\r\n      };\r\n\r\n      const response = await axios.get<CatastroResponse>(url, config);\r\n\r\n      return response.data.smp;\r\n    } catch (error) {\r\n      if (axios.isCancel(error)) {\r\n        if (this.debug) console.debug(\"Request was aborted\");\r\n      } else {\r\n        console.error(\"Error fetching catastro data:\", error);\r\n      }\r\n      return undefined;\r\n    } finally {\r\n      this.lastRequest = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if the normalizer is initialized\r\n   */\r\n  static inicializado(): boolean {\r\n    return true;\r\n  }\r\n}\r\n","interface Loader2IconProps {\r\n  className?: string;\r\n  size?: number;\r\n  color?: string;\r\n}\r\n\r\nexport const LoaderIcon: React.FC<Loader2IconProps> = ({\r\n  className = \"\",\r\n  size = 24,\r\n  color = \"currentColor\",\r\n}) => {\r\n  return (\r\n    <svg\r\n      width={size}\r\n      height={size}\r\n      viewBox=\"0 0 24 24\"\r\n      fill=\"none\"\r\n      stroke={color}\r\n      strokeWidth=\"2\"\r\n      strokeLinecap=\"round\"\r\n      strokeLinejoin=\"round\"\r\n      className={className}\r\n    >\r\n      <path d=\"M21 12a9 9 0 1 1-6.219-8.56\" />\r\n    </svg>\r\n  );\r\n};\r\n","interface NavigationIconProps {\r\n  className?: string\r\n  size?: number\r\n  color?: string\r\n}\r\n\r\nexport const NavigationIcon: React.FC<NavigationIconProps> = ({\r\n  className = \"\",\r\n  size = 24,\r\n  color = \"currentColor\",\r\n}) => {\r\n  return (\r\n    <svg\r\n      width={size}\r\n      height={size}\r\n      viewBox=\"0 0 24 24\"\r\n      fill=\"none\"\r\n      stroke={color}\r\n      strokeWidth=\"2\"\r\n      strokeLinecap=\"round\"\r\n      strokeLinejoin=\"round\"\r\n      className={className}\r\n    >\r\n      <polygon points=\"3,11 22,2 13,21 11,13 3,11\" />\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default NavigationIcon\r\n","import { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport { ApiNormalizer } from \"@/lib/api-normalizer\";\r\nimport type { DireccionSuggestion, DireccionType, Calle } from \"../types/direction.types\";\r\nimport { LoaderIcon } from \"@/assets/Loader\";\r\nimport NavigationIcon from \"@/assets/Navigation\";\r\n\r\ninterface AddressSearchProps {\r\n  maxSuggestions?: number;\r\n  onAddressSelect: (address: DireccionSuggestion) => void;\r\n  onAddressesRemove: (index: number) => void;\r\n  selectedAddresses: DireccionSuggestion[];\r\n  placeholder?: string;\r\n  debug?: boolean;\r\n  className?: string;\r\n  inputClassName?: string;\r\n  suggestionsClassName?: string;\r\n  suggestionItemClassName?: string;\r\n  selectedAddressesClassName?: string;\r\n  loadingClassName?: string;\r\n  suggestionsContainerClassName?: string;\r\n  selectedAddressesContainerClassName?: string;\r\n  selectedAddressItemClassName?: string;\r\n  removeButtonClassName?: string;\r\n  errorClassName?: string;\r\n  iconClassName?: string;\r\n  titleClassName?: string;\r\n  subtitleClassName?: string;\r\n  coordsClassName?: string;\r\n  smpClassName?: string;\r\n  serverTimeout?: number;\r\n  isDebug?: boolean;\r\n}\r\n\r\nexport const AddressSearch: React.FC<AddressSearchProps> = ({\r\n  maxSuggestions = 10,\r\n  onAddressSelect,\r\n  onAddressesRemove,\r\n  placeholder = \"Buscar dirección o coordenadas...\",\r\n  debug = false,\r\n  className = \"\",\r\n  inputClassName = \"\",\r\n  selectedAddresses = [],\r\n  suggestionsClassName = \"\",\r\n  suggestionItemClassName = \"\",\r\n  selectedAddressesClassName = \"\",\r\n  loadingClassName = \"\",\r\n  suggestionsContainerClassName = \"\",\r\n  selectedAddressesContainerClassName = \"\",\r\n  selectedAddressItemClassName = \"\",\r\n  removeButtonClassName = \"\",\r\n  errorClassName = \"\",\r\n  iconClassName = \"\",\r\n  titleClassName = \"\",\r\n  coordsClassName = \"\",\r\n  smpClassName = \"\",\r\n  serverTimeout = 5000,\r\n  isDebug = false,\r\n}) => {\r\n  const [searchText, setSearchText] = useState<string>(\"\");\r\n  const [suggestions, setSuggestions] = useState<DireccionSuggestion[]>([]);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [showSuggestions, setShowSuggestions] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const inputTimerRef = useRef<NodeJS.Timeout | null>(null);\r\n  const normalizadorRef = useRef<ApiNormalizer | null>(null);\r\n  // Initialize the ApiNormalizer on component mount\r\n  useEffect(() => {\r\n    normalizadorRef.current = new ApiNormalizer({\r\n      debug,\r\n      maxSuggestions,\r\n      serverTimeout,\r\n    });\r\n\r\n    return () => {\r\n      // Clean up any pending requests on unmount\r\n      if (inputTimerRef.current) {\r\n        clearTimeout(inputTimerRef.current);\r\n      }\r\n      if (normalizadorRef.current) {\r\n        normalizadorRef.current.abort();\r\n      }\r\n    };\r\n  }, [debug, maxSuggestions, serverTimeout]);\r\n\r\n  const convertToDireccionSuggestion = (\r\n    d: DireccionType | Calle\r\n  ): DireccionSuggestion => {\r\n    if (d.tipo === \"CALLE\") {\r\n      // It's a Calle type\r\n      return {\r\n        title: d.nombre,\r\n        subTitle: d.descripcion || \"CABA\",\r\n        type: \"CALLE\",\r\n        category: \"CALLE\",\r\n        suggesterName: \"Direcciones\",\r\n        data: {\r\n          nombre: d.nombre,\r\n          descripcion: d.descripcion || \"\",\r\n          tipo: \"CALLE\",\r\n          codigo: d.codigo,\r\n          altura_par: d.altura_par,\r\n          altura_impar: d.altura_impar,\r\n          calle_alturas: d.calle_alturas,\r\n        },\r\n      };\r\n    } else {\r\n      // It's a DireccionType\r\n      return {\r\n        title: d.nombre,\r\n        subTitle: d.descripcion || \"CABA\",\r\n        type: d.tipoDireccion,\r\n        category: d.tipoDireccion,\r\n        suggesterName: \"Direcciones\",\r\n        data: {\r\n          nombre: d.nombre,\r\n          descripcion: d.descripcion || \"\",\r\n          tipo: d.tipo,\r\n          codigo: d.calle.codigo,\r\n          altura:\r\n            d.tipoDireccion === \"DIRECCION_CALLE_ALTURA\" ? d.altura : undefined,\r\n          calle: {\r\n            codigo: d.calle.codigo,\r\n          },\r\n          coordenadas: d.coordenadas,\r\n          smp: d.smp,\r\n          barrio: d.barrio,\r\n          comuna: d.comuna,\r\n          altura_par: d.altura_par,\r\n          altura_impar: d.altura_impar,\r\n          calle_alturas: d.calle_alturas,\r\n        },\r\n      };\r\n    }\r\n  };\r\n\r\n  const getSuggestions = useCallback(\r\n    async (text: string) => {\r\n      if (debug) {\r\n        console.debug(`getSuggestions('${text}')`);\r\n      }\r\n\r\n      if (!normalizadorRef.current || !text || text.length < 3) {\r\n        setSuggestions([]);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        const direcciones = await normalizadorRef.current.normalizar(\r\n          text,\r\n          maxSuggestions\r\n        );\r\n        const results = direcciones.map(convertToDireccionSuggestion);\r\n\r\n        setSuggestions(results);\r\n\r\n        // Automatically show suggestions when we have results or when loading\r\n        setShowSuggestions(true);\r\n\r\n        if (results.length === 0) {\r\n          setError(\"No se encontraron resultados\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error getting suggestions:\", error);\r\n        setSuggestions([]);\r\n        setError(\"Error al buscar direcciones\");\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    },\r\n    [debug, maxSuggestions]\r\n  );\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value;\r\n    setSearchText(value);\r\n    setError(null);\r\n\r\n    // Clear previous timer\r\n    if (inputTimerRef.current) {\r\n      clearTimeout(inputTimerRef.current);\r\n    }\r\n\r\n    // Abort any ongoing request\r\n    if (normalizadorRef.current) {\r\n      normalizadorRef.current.abort();\r\n    }\r\n\r\n    // Set a new timer to delay the search\r\n    if (value.length >= 3) {\r\n      // Show suggestions container immediately when typing (even before results arrive)\r\n      setShowSuggestions(true);\r\n      setIsLoading(true);\r\n\r\n      inputTimerRef.current = setTimeout(() => {\r\n        getSuggestions(value);\r\n      }, 300);\r\n    } else {\r\n      setSuggestions([]);\r\n      setShowSuggestions(false);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSelectSuggestion = (suggestion: DireccionSuggestion) => {\r\n    // Add to selected addresses if not already there\r\n    if (\r\n      !selectedAddresses.some(\r\n        (addr) => addr.data?.nombre === suggestion.data?.nombre\r\n      )\r\n    ) {\r\n      onAddressSelect(suggestion);\r\n    }\r\n\r\n    // Clear input and suggestions\r\n    setSearchText(\"\");\r\n    setSuggestions([]);\r\n    setShowSuggestions(false);\r\n  };\r\n\r\n  const handleRemoveAddress = (index: number) => {\r\n    onAddressesRemove(index);\r\n  };\r\n\r\n  const handleInputFocus = () => {\r\n    if (searchText.length >= 3) {\r\n      setShowSuggestions(true);\r\n    }\r\n  };\r\n\r\n  const handleInputBlur = () => {\r\n    // Delay hiding suggestions to allow clicking on them\r\n    setTimeout(() => {\r\n      setShowSuggestions(false);\r\n    }, 200);\r\n  };\r\n\r\n  return (\r\n    <div className={`w-full ${className}`}>\r\n      <div className=\"relative max-w-[500px]\">\r\n        <input\r\n          type=\"text\"\r\n          value={searchText}\r\n          onChange={handleInputChange}\r\n          onFocus={handleInputFocus}\r\n          onBlur={handleInputBlur}\r\n          placeholder={placeholder}\r\n          className={`w-full h-[24px] p-[8px] border rounded ${inputClassName}`}\r\n        />\r\n        {isLoading && (\r\n          <div\r\n            className={`absolute right-[0] top-1/2 transform -translate-y-1/2 ${loadingClassName}`}\r\n          >\r\n            <LoaderIcon className=\"h-4 w-4 text-gray-500 animate-spin\" />\r\n          </div>\r\n        )}\r\n\r\n        {(showSuggestions || isLoading) && (\r\n          <div\r\n            className={`absolute z-10 w-full bg-[#FFFFFF] border border-t-0 rounded shadow-lg max-h-[200px] overflow-auto px-[8px] ${suggestionsContainerClassName}`}\r\n          >\r\n            {isLoading ? (\r\n              <div\r\n                className={`p-[8px] flex items-center justify-center gap-[8px] text-gray-500  ${suggestionsClassName}`}\r\n              >\r\n                <LoaderIcon className=\"h-5 w-2 animate-spin mb-2\" />\r\n                <span>Buscando direcciones...</span>\r\n              </div>\r\n            ) : suggestions.length > 0 ? (\r\n              suggestions.map((suggestion, index) => (\r\n                <div\r\n                  key={`${suggestion.data.nombre}-${index}`}\r\n                  className={`my-[8px] border-b border-[#b8b5b4] last:border-b-0 cursor-pointer hover:bg-[#dfe0e1] transition duration-300 ease-in-out bg-white rounded-[4px] w-[100%] ${suggestionItemClassName}`}\r\n                  onClick={() => handleSelectSuggestion(suggestion)}\r\n                >\r\n                  <div className=\"flex items-center gap-[8px]\">\r\n                    <div>\r\n                      <NavigationIcon\r\n                        className={`h-4 text-[#0042ff] ${iconClassName}`}\r\n                      />\r\n                    </div>\r\n                    <div className=\"flex flex-center gap-[8px]\">\r\n                      <span className={`font-medium text-[14px] truncate ${titleClassName}`}>\r\n                        {suggestion.title}.\r\n                      </span>\r\n\r\n                      {suggestion.data.coordenadas && (\r\n                        <span\r\n                          className={`text-xs text-gray-400 truncate ${coordsClassName}`}\r\n                        >\r\n                          Coord: {suggestion.data.coordenadas.x.toFixed(6)},{\" \"}\r\n                          {suggestion.data.coordenadas.y.toFixed(6)}\r\n                        </span>\r\n                      )}\r\n                      {suggestion.data.smp && (\r\n                        <span\r\n                          className={`text-xs text-gray-400 ${smpClassName}`}\r\n                        >\r\n                          SMP: {suggestion.data.smp}\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))\r\n            ) : searchText.length >= 3 ? (\r\n              <div className={`p-[8px] text-center text-red-500 ${errorClassName}`}>\r\n                {error || \"No se encontraron resultados\"}\r\n              </div>\r\n            ) : (\r\n              <div\r\n                className={`p-4 text-center text-gray-500 ${suggestionsClassName}`}\r\n              >\r\n                Ingrese al menos 3 caracteres para buscar\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {error && !isLoading && !showSuggestions && (\r\n          <div className={`mt-[8px] text-sm text-red-500 ${errorClassName}`}>\r\n            {error}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {isDebug && (\r\n        <>\r\n          {\r\n            selectedAddresses.length > 0 && (\r\n              <div\r\n                className={`${selectedAddressesClassName} ${selectedAddressesContainerClassName}`}\r\n              >\r\n                <h3 className=\"text-sm font-medium mb-2\">\r\n                  Direcciones seleccionadas:\r\n                </h3>\r\n                <ul className=\"space-y-2\">\r\n                  {selectedAddresses.map((address, index) => (\r\n                    <li\r\n                      key={`selected-${index}`}\r\n                      className={`flex justify-between items-center p-2 bg-gray-50 rounded ${selectedAddressItemClassName}`}\r\n                    >\r\n                      <div className=\"flex items-center gap-[8px]\">\r\n                        <div className=\"mt-1\">\r\n                          <NavigationIcon\r\n                            className={`h-4 w-4 text-[#0042ff] ${iconClassName}`}\r\n                          />\r\n                        </div>\r\n                        <div className=\"flex flex-center gap-[8px]\">\r\n                          <div className={`font-medium ${titleClassName}`}>\r\n                            {address.title}.\r\n                          </div>\r\n                          {address.data.coordenadas && (\r\n                            <div\r\n                              className={`text-xs text-gray-400 ${coordsClassName}`}\r\n                            >\r\n                              Coord: {address.data.coordenadas.x.toFixed(6)},{\" \"}\r\n                              {address.data.coordenadas.y.toFixed(6)}\r\n                            </div>\r\n                          )}\r\n                          {address.data.smp && (\r\n                            <div className={`text-xs text-gray-400 ${smpClassName}`}>\r\n                              SMP: {address.data.smp}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => handleRemoveAddress(index)}\r\n                        className={`text-[#FFF] bg-[#ff0000] rounded-[4px] border-0 h-[24px] w-[24px] cursor-pointer transition duration-300 ease-in-out hover:scale-125 ${removeButtonClassName}`}\r\n                      >\r\n                        ×\r\n                      </button>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            )\r\n          }\r\n        </>\r\n\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import type React from \"react\";\r\nimport { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport { ApiNormalizer } from \"@/lib/api-normalizer\";\r\nimport type {\r\n  DireccionSuggestion,\r\n  DireccionType,\r\n  Calle,\r\n} from \"../types/direction.types\";\r\n\r\ninterface AddressSearchOptions {\r\n  maxSuggestions?: number;\r\n  debug?: boolean;\r\n  serverTimeout?: number;\r\n}\r\n\r\ninterface UseAddressSearchReturn {\r\n  searchText: string;\r\n  setSearchText: (text: string) => void;\r\n  suggestions: DireccionSuggestion[];\r\n  selectedAddresses: DireccionSuggestion[];\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  showSuggestions: boolean;\r\n  setShowSuggestions: (show: boolean) => void;\r\n  handleInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  handleSelectSuggestion: (suggestion: DireccionSuggestion) => void;\r\n  handleRemoveAddress: (index: number) => void;\r\n  handleInputFocus: () => void;\r\n  handleInputBlur: () => void;\r\n}\r\n\r\nexport function useAddressSearch(\r\n  options: AddressSearchOptions = {}\r\n): UseAddressSearchReturn {\r\n  const { maxSuggestions = 10, debug = false, serverTimeout = 5000 } = options;\r\n\r\n  const [searchText, setSearchText] = useState<string>(\"\");\r\n  const [suggestions, setSuggestions] = useState<DireccionSuggestion[]>([]);\r\n  const [selectedAddresses, setSelectedAddresses] = useState<\r\n    DireccionSuggestion[]\r\n  >([]);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [showSuggestions, setShowSuggestions] = useState<boolean>(false);\r\n  const inputTimerRef = useRef<NodeJS.Timeout | null>(null);\r\n  const normalizadorRef = useRef<ApiNormalizer | null>(null);\r\n\r\n  // Initialize the ApiNormalizer on component mount\r\n  useEffect(() => {\r\n    normalizadorRef.current = new ApiNormalizer({\r\n      debug,\r\n      maxSuggestions,\r\n      serverTimeout,\r\n    });\r\n\r\n    return () => {\r\n      // Clean up any pending requests on unmount\r\n      if (inputTimerRef.current) {\r\n        clearTimeout(inputTimerRef.current);\r\n      }\r\n      if (normalizadorRef.current) {\r\n        normalizadorRef.current.abort();\r\n      }\r\n    };\r\n  }, [debug, maxSuggestions, serverTimeout]);\r\n\r\n  const convertToDireccionSuggestion = (\r\n    d: DireccionType | Calle\r\n  ): DireccionSuggestion => {\r\n    if (d.tipo === \"CALLE\") {\r\n      // It's a Calle type\r\n      return {\r\n        title: d.nombre,\r\n        subTitle: d.descripcion || \"CABA\",\r\n        type: \"CALLE\",\r\n        category: \"CALLE\",\r\n        suggesterName: \"Direcciones\",\r\n        data: {\r\n          nombre: d.nombre,\r\n          descripcion: d.descripcion || \"\",\r\n          tipo: \"CALLE\",\r\n          codigo: d.codigo,\r\n          altura_par: d.altura_par,\r\n          altura_impar: d.altura_impar,\r\n          calle_alturas: d.calle_alturas,\r\n        },\r\n      };\r\n    } else {\r\n      // It's a DireccionType\r\n      return {\r\n        title: d.nombre,\r\n        subTitle: d.descripcion || \"CABA\",\r\n        type: d.tipoDireccion,\r\n        category: d.tipoDireccion,\r\n        suggesterName: \"Direcciones\",\r\n        data: {\r\n          nombre: d.nombre,\r\n          descripcion: d.descripcion || \"\",\r\n          tipo: d.tipo,\r\n          codigo: d.calle.codigo,\r\n          altura:\r\n            d.tipoDireccion === \"DIRECCION_CALLE_ALTURA\" ? d.altura : undefined,\r\n          calle: {\r\n            codigo: d.calle.codigo,\r\n          },\r\n          coordenadas: d.coordenadas,\r\n          altura_par: d.altura_par,\r\n          altura_impar: d.altura_impar,\r\n          calle_alturas: d.calle_alturas,\r\n          smp: d.smp,\r\n        },\r\n      };\r\n    }\r\n  };\r\n\r\n  const fetchSuggestions = useCallback(\r\n    async (text: string) => {\r\n      if (debug) {\r\n        console.debug(`fetchSuggestions('${text}')`);\r\n      }\r\n\r\n      if (!normalizadorRef.current || !text || text.length < 3) {\r\n        setSuggestions([]);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        const direcciones = await normalizadorRef.current.normalizar(\r\n          text,\r\n          maxSuggestions\r\n        );\r\n        const results = direcciones.map(convertToDireccionSuggestion);\r\n\r\n        setSuggestions(results);\r\n\r\n        if (results.length === 0) {\r\n          setError(\"No se encontraron resultados\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error getting suggestions:\", error);\r\n        setSuggestions([]);\r\n        setError(\"Error al buscar direcciones\");\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    },\r\n    [debug, maxSuggestions]\r\n  );\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value;\r\n    setSearchText(value);\r\n    setError(null);\r\n\r\n    // Clear previous timer\r\n    if (inputTimerRef.current) {\r\n      clearTimeout(inputTimerRef.current);\r\n    }\r\n\r\n    // Abort any ongoing request\r\n    if (normalizadorRef.current) {\r\n      normalizadorRef.current.abort();\r\n    }\r\n\r\n    // Set a new timer to delay the search\r\n    if (value.length >= 3) {\r\n      inputTimerRef.current = setTimeout(() => {\r\n        fetchSuggestions(value);\r\n      }, 300);\r\n    } else {\r\n      setSuggestions([]);\r\n    }\r\n  };\r\n\r\n  const handleSelectSuggestion = (suggestion: DireccionSuggestion) => {\r\n    // Add to selected addresses if not already there\r\n    if (\r\n      !selectedAddresses.some(\r\n        (addr) => addr.data?.nombre === suggestion.data.nombre\r\n      )\r\n    ) {\r\n      setSelectedAddresses((prev) => [...prev, suggestion]);\r\n    }\r\n\r\n    // Clear input and suggestions\r\n    setSearchText(\"\");\r\n    setSuggestions([]);\r\n    setShowSuggestions(false);\r\n  };\r\n\r\n  const handleRemoveAddress = (index: number) => {\r\n    setSelectedAddresses((prev) => {\r\n      const newAddresses = [...prev];\r\n      newAddresses.splice(index, 1);\r\n      return newAddresses;\r\n    });\r\n  };\r\n\r\n  const handleInputFocus = () => {\r\n    if (searchText.length >= 3 && suggestions.length > 0) {\r\n      setShowSuggestions(true);\r\n    }\r\n  };\r\n\r\n  const handleInputBlur = () => {\r\n    // Delay hiding suggestions to allow clicking on them\r\n    setTimeout(() => {\r\n      setShowSuggestions(false);\r\n    }, 200);\r\n  };\r\n\r\n  return {\r\n    searchText,\r\n    setSearchText,\r\n    suggestions,\r\n    selectedAddresses,\r\n    isLoading,\r\n    error,\r\n    showSuggestions,\r\n    setShowSuggestions,\r\n    handleInputChange,\r\n    handleSelectSuggestion,\r\n    handleRemoveAddress,\r\n    handleInputFocus,\r\n    handleInputBlur,\r\n  };\r\n}\r\n"],"names":["USIG_WEBSERVICE_URL","ApiNormalizer","debug","maxSuggestions","lastRequest","serverTimeout","constructor","options","this","abort","console","normalizar","str","maxOptions","AbortController","results","addresses","searchAddresses","coordsMatch","parseCoordinates","coordResults","reverseGeocode","x","y","slice","error","axios","isCancel","url","encodeURIComponent","config","headers","Accept","signal","timeout","response","get","data","direccionesNormalizadas","length","direccionesCABA","filter","dir","cod","cod_partido","toLowerCase","nombrePartido","nombre_partido","nombreLocalidad","nombre_localidad","direccionesEnriquecidas","Promise","all","map","async","coordenadas","obtenerCoordenadas","cod_calle","Number","altura","barrio","comuna","obtenerBarrioYComuna","altura_par","altura_impar","calle_alturas","toString","srid","processDireccionesNormalizadas","calles","processCalles","lat","lon","capas","calle","numero","geocodingUrl","geocodingResponse","jsonString","replace","JSON","parse","getAltura","conversionUrl","conversionResponse","alturaJsonString","resultado","cleanStr","trim","patterns","pattern","match","parseFloat","direccion","codigo","nombre","descripcion","tipo","alturas","inicio","fin","parseInt","tipoDireccion","toFixed","nombre_barrio","nombre_comuna","direcciones","resolve","promises","split","includes","calleNames","c","calleCruce","undefined","smp","getSMP","then","Boolean","inicial","final","partido","localidad","getCoordinates","lugar","coords","String","inicializado","LoaderIcon","className","size","color","_jsx","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","NavigationIcon","points","AddressSearch","onAddressSelect","onAddressesRemove","placeholder","inputClassName","selectedAddresses","suggestionsClassName","suggestionItemClassName","selectedAddressesClassName","loadingClassName","suggestionsContainerClassName","selectedAddressesContainerClassName","selectedAddressItemClassName","removeButtonClassName","errorClassName","iconClassName","titleClassName","coordsClassName","smpClassName","isDebug","searchText","setSearchText","useState","suggestions","setSuggestions","isLoading","setIsLoading","showSuggestions","setShowSuggestions","setError","inputTimerRef","useRef","normalizadorRef","useEffect","current","clearTimeout","convertToDireccionSuggestion","title","subTitle","type","category","suggesterName","getSuggestions","useCallback","text","_jsxs","children","value","onChange","e","target","setTimeout","onFocus","onBlur","suggestion","index","onClick","some","addr","handleSelectSuggestion","_Fragment","address","handleRemoveAddress","useAddressSearch","setSelectedAddresses","fetchSuggestions","handleInputChange","prev","newAddresses","splice","handleInputFocus","handleInputBlur"],"mappings":"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"}